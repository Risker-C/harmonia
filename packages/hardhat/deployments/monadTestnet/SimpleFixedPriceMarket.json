{
  "address": "0x41E7C90B3003B584Df3E49aD1A62A93F931aa3C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Listed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ListingCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCurrency",
          "type": "address"
        }
      ],
      "name": "ListingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "royaltyReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "Purchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nft",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct SimpleFixedPriceMarket.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListingKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "list",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1ea72ba93b0dc97e9d9b32936f036e886a299ae0644d0c2121ad0c66e01cd17",
  "receipt": {
    "to": null,
    "from": "0xa1adE6E2d53C54aa98159687bdB0761e513b94B8",
    "contractAddress": "0x41E7C90B3003B584Df3E49aD1A62A93F931aa3C1",
    "transactionIndex": 13,
    "gasUsed": "1244185",
    "logsBloom": "0x
    "blockHash": "0x9bb8cf48a895fe37207427fc305fb9c040cc035ffc4d65712d4d492279f8ca5a",
    "transactionHash": "0xa1ea72ba93b0dc97e9d9b32936f036e886a299ae0644d0c2121ad0c66e01cd17",
    "logs": [],
    "blockNumber": 31076048,
    "cumulativeGasUsed": "4833509",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2143ade6ada2c16d7f70dd634d97d6f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ListingCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCurrency\",\"type\":\"address\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct SimpleFixedPriceMarket.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListingKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u6781\\u7b80\\u5b9a\\u4ef7\\u6302\\u5355\\u5e02\\u573a\\uff1a - \\u5356\\u5bb6\\u521b\\u5efa\\u6302\\u5355\\uff08\\u4ec5\\u8bb0\\u5f55\\uff0c\\u4e0d\\u6258\\u7ba1 NFT\\uff09\\uff0c\\u8d2d\\u4e70\\u65f6\\u6821\\u9a8c\\u6240\\u6709\\u6743/\\u6388\\u6743 - \\u652f\\u6301 ETH \\u6216 ERC20 \\u7ed3\\u7b97 - \\u82e5 NFT \\u652f\\u6301 ERC-2981\\uff0c\\u5219\\u5728\\u6210\\u4ea4\\u65f6\\u81ea\\u52a8\\u652f\\u4ed8\\u7248\\u7a0e\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"buy(address,uint256)\":{\"details\":\"\\u8d2d\\u4e70\\uff1a - \\u6821\\u9a8c\\u4ecd\\u7531\\u5356\\u5bb6\\u6301\\u6709\\u4e14\\u5e02\\u573a\\u4ecd\\u88ab\\u6388\\u6743 - \\u82e5 NFT \\u652f\\u6301 ERC-2981\\uff0c\\u5219\\u8ba1\\u7b97\\u5e76\\u652f\\u4ed8\\u7248\\u7a0e - \\u5c06\\u5269\\u4f59\\u6b3e\\u9879\\u652f\\u4ed8\\u7ed9\\u5356\\u5bb6 - \\u5b8c\\u6210 NFT \\u8f6c\\u79fb\"},\"cancel(address,uint256)\":{\"details\":\"\\u53d6\\u6d88\\u6302\\u5355\\uff08\\u4ec5\\u5356\\u5bb6\\uff09\"},\"list(address,uint256,address,uint256)\":{\"details\":\"\\u521b\\u5efa\\u6302\\u5355\\uff08\\u4e0d\\u6258\\u7ba1 NFT\\uff09\\u3002\\u8981\\u6c42\\uff1a - msg.sender \\u662f\\u5f53\\u524d\\u6240\\u6709\\u8005\\uff0c\\u6216\\u5df2\\u88ab\\u6388\\u6743\\u4e3a operator\\uff08setApprovalForAll \\u6216 approve\\uff09 - price > 0\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"update(address,uint256,address,uint256)\":{\"details\":\"\\u66f4\\u65b0\\u4ef7\\u683c\\u6216\\u5e01\\u79cd\\uff08\\u4ec5\\u5356\\u5bb6\\uff09\"}},\"title\":\"SimpleFixedPriceMarket\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleFixedPriceMarket.sol\":\"SimpleFixedPriceMarket\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/SimpleFixedPriceMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title SimpleFixedPriceMarket\\n * @dev \\u6781\\u7b80\\u5b9a\\u4ef7\\u6302\\u5355\\u5e02\\u573a\\uff1a\\n * - \\u5356\\u5bb6\\u521b\\u5efa\\u6302\\u5355\\uff08\\u4ec5\\u8bb0\\u5f55\\uff0c\\u4e0d\\u6258\\u7ba1 NFT\\uff09\\uff0c\\u8d2d\\u4e70\\u65f6\\u6821\\u9a8c\\u6240\\u6709\\u6743/\\u6388\\u6743\\n * - \\u652f\\u6301 ETH \\u6216 ERC20 \\u7ed3\\u7b97\\n * - \\u82e5 NFT \\u652f\\u6301 ERC-2981\\uff0c\\u5219\\u5728\\u6210\\u4ea4\\u65f6\\u81ea\\u52a8\\u652f\\u4ed8\\u7248\\u7a0e\\n */\\ncontract SimpleFixedPriceMarket is ReentrancyGuard, ERC165 {\\n    using SafeERC20 for IERC20;\\n\\n    struct Listing {\\n        address nft;\\n        uint256 tokenId;\\n        address seller;\\n        address currency; // address(0) = ETH, otherwise ERC20 token address\\n        uint256 price; // in wei or token smallest unit\\n        bool active;\\n    }\\n\\n    // key: keccak256(nft, tokenId)\\n    mapping(bytes32 => Listing) private listings;\\n\\n    event Listed(address indexed nft, uint256 indexed tokenId, address indexed seller, address currency, uint256 price);\\n    event ListingUpdated(address indexed nft, uint256 indexed tokenId, uint256 newPrice, address newCurrency);\\n    event ListingCanceled(address indexed nft, uint256 indexed tokenId);\\n    event Purchased(\\n        address indexed nft,\\n        uint256 indexed tokenId,\\n        address indexed buyer,\\n        address seller,\\n        address currency,\\n        uint256 price,\\n        address royaltyReceiver,\\n        uint256 royaltyAmount\\n    );\\n\\n    function getListingKey(address nft, uint256 tokenId) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(nft, tokenId));\\n    }\\n\\n    function getListing(address nft, uint256 tokenId) external view returns (Listing memory) {\\n        return listings[getListingKey(nft, tokenId)];\\n    }\\n\\n    /**\\n     * @dev \\u521b\\u5efa\\u6302\\u5355\\uff08\\u4e0d\\u6258\\u7ba1 NFT\\uff09\\u3002\\u8981\\u6c42\\uff1a\\n     * - msg.sender \\u662f\\u5f53\\u524d\\u6240\\u6709\\u8005\\uff0c\\u6216\\u5df2\\u88ab\\u6388\\u6743\\u4e3a operator\\uff08setApprovalForAll \\u6216 approve\\uff09\\n     * - price > 0\\n     */\\n    function list(address nft, uint256 tokenId, address currency, uint256 price) external {\\n        require(price > 0, \\\"Invalid price\\\");\\n        address owner = IERC721(nft).ownerOf(tokenId);\\n        require(owner == msg.sender, \\\"Not token owner\\\");\\n        require(\\n            IERC721(nft).getApproved(tokenId) == address(this) ||\\n                IERC721(nft).isApprovedForAll(owner, address(this)),\\n            \\\"Market not approved\\\"\\n        );\\n\\n        bytes32 key = getListingKey(nft, tokenId);\\n        listings[key] = Listing({\\n            nft: nft,\\n            tokenId: tokenId,\\n            seller: msg.sender,\\n            currency: currency,\\n            price: price,\\n            active: true\\n        });\\n\\n        emit Listed(nft, tokenId, msg.sender, currency, price);\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0\\u4ef7\\u683c\\u6216\\u5e01\\u79cd\\uff08\\u4ec5\\u5356\\u5bb6\\uff09\\n     */\\n    function update(address nft, uint256 tokenId, address newCurrency, uint256 newPrice) external {\\n        bytes32 key = getListingKey(nft, tokenId);\\n        Listing storage l = listings[key];\\n        require(l.active, \\\"Not listed\\\");\\n        require(l.seller == msg.sender, \\\"Not seller\\\");\\n        require(newPrice > 0, \\\"Invalid price\\\");\\n        l.currency = newCurrency;\\n        l.price = newPrice;\\n        emit ListingUpdated(nft, tokenId, newPrice, newCurrency);\\n    }\\n\\n    /**\\n     * @dev \\u53d6\\u6d88\\u6302\\u5355\\uff08\\u4ec5\\u5356\\u5bb6\\uff09\\n     */\\n    function cancel(address nft, uint256 tokenId) external {\\n        bytes32 key = getListingKey(nft, tokenId);\\n        Listing storage l = listings[key];\\n        require(l.active, \\\"Not listed\\\");\\n        require(l.seller == msg.sender, \\\"Not seller\\\");\\n        delete listings[key];\\n        emit ListingCanceled(nft, tokenId);\\n    }\\n\\n    /**\\n     * @dev \\u8d2d\\u4e70\\uff1a\\n     * - \\u6821\\u9a8c\\u4ecd\\u7531\\u5356\\u5bb6\\u6301\\u6709\\u4e14\\u5e02\\u573a\\u4ecd\\u88ab\\u6388\\u6743\\n     * - \\u82e5 NFT \\u652f\\u6301 ERC-2981\\uff0c\\u5219\\u8ba1\\u7b97\\u5e76\\u652f\\u4ed8\\u7248\\u7a0e\\n     * - \\u5c06\\u5269\\u4f59\\u6b3e\\u9879\\u652f\\u4ed8\\u7ed9\\u5356\\u5bb6\\n     * - \\u5b8c\\u6210 NFT \\u8f6c\\u79fb\\n     */\\n    function buy(address nft, uint256 tokenId) external payable nonReentrant {\\n        bytes32 key = getListingKey(nft, tokenId);\\n        Listing memory l = listings[key];\\n        require(l.active, \\\"Not listed\\\");\\n        require(l.seller != address(0), \\\"Invalid listing\\\");\\n        require(l.seller != msg.sender, \\\"Seller cannot buy\\\");\\n\\n        // \\u6821\\u9a8c\\u5f53\\u524d\\u6240\\u6709\\u6743\\u4e0e\\u6388\\u6743\\n        address owner = IERC721(nft).ownerOf(tokenId);\\n        require(owner == l.seller, \\\"Seller no longer owns token\\\");\\n        require(\\n            IERC721(nft).getApproved(tokenId) == address(this) ||\\n                IERC721(nft).isApprovedForAll(owner, address(this)),\\n            \\\"Market not approved\\\"\\n        );\\n\\n        // \\u7248\\u7a0e\\u67e5\\u8be2\\uff08\\u82e5\\u652f\\u6301 ERC-2981\\uff09\\n        (address royaltyReceiver, uint256 royaltyAmount) = _royaltyInfoIfSupported(nft, tokenId, l.price);\\n\\n        if (l.currency == address(0)) {\\n            // ETH \\u652f\\u4ed8\\n            require(msg.value >= l.price, \\\"Insufficient ETH\\\");\\n            // \\u652f\\u4ed8\\u7248\\u7a0e\\n            if (royaltyAmount > 0 && royaltyReceiver != address(0)) {\\n                (bool okRoy, ) = payable(royaltyReceiver).call{value: royaltyAmount}(\\\"\\\");\\n                require(okRoy, \\\"Royalty transfer failed\\\");\\n            }\\n            // \\u652f\\u4ed8\\u7ed9\\u5356\\u5bb6\\n            uint256 sellerAmount = l.price - royaltyAmount;\\n            (bool okSeller, ) = payable(l.seller).call{value: sellerAmount}(\\\"\\\");\\n            require(okSeller, \\\"Seller transfer failed\\\");\\n            // \\u627e\\u96f6\\n            uint256 refund = msg.value - l.price;\\n            if (refund > 0) {\\n                (bool okRefund, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n                require(okRefund, \\\"Refund failed\\\");\\n            }\\n        } else {\\n            // ERC20 \\u652f\\u4ed8\\uff1a\\u4e70\\u5bb6\\u9700\\u5148 approve \\u7ed9\\u5e02\\u573a\\u5408\\u7ea6\\n            if (royaltyAmount > 0 && royaltyReceiver != address(0)) {\\n                IERC20(l.currency).safeTransferFrom(msg.sender, royaltyReceiver, royaltyAmount);\\n            }\\n            uint256 sellerAmount = l.price - royaltyAmount;\\n            IERC20(l.currency).safeTransferFrom(msg.sender, l.seller, sellerAmount);\\n        }\\n\\n        // \\u8f6c\\u79fb NFT \\u7ed9\\u4e70\\u5bb6\\n        IERC721(nft).safeTransferFrom(l.seller, msg.sender, tokenId);\\n\\n        // \\u5220\\u9664\\u6302\\u5355\\n        delete listings[key];\\n\\n        emit Purchased(nft, tokenId, msg.sender, l.seller, l.currency, l.price, royaltyReceiver, royaltyAmount);\\n    }\\n\\n    function _royaltyInfoIfSupported(\\n        address nft,\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) internal view returns (address, uint256) {\\n        try IERC165(nft).supportsInterface(type(IERC2981).interfaceId) returns (bool supported) {\\n            if (supported) {\\n                try IERC2981(nft).royaltyInfo(tokenId, salePrice) returns (address receiver, uint256 amount) {\\n                    return (receiver, amount);\\n                } catch {\\n                    return (address(0), 0);\\n                }\\n            }\\n            return (address(0), 0);\\n        } catch {\\n            return (address(0), 0);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n} \",\"keccak256\":\"0x027cc41cd5938066cfdc3baa76f5fe058f457f5ab504f963feafefb1cfa5d920\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000556114f0806100256000396000f3fe6080604052600436106100705760003560e01c806388700d1c1161004e57806388700d1c146100fa57806398590ef914610173578063cce7ec1314610193578063ea8cdb1f146101a657600080fd5b806301ffc9a71461007557806330f0d2cb146100aa5780637d1b0a44146100cc575b600080fd5b34801561008157600080fd5b50610095610090366004611326565b6101c6565b60405190151581526020015b60405180910390f35b3480156100b657600080fd5b506100ca6100c5366004611365565b6101e3565b005b3480156100d857600080fd5b506100ec6100e73660046113ad565b610326565b6040519081526020016100a1565b34801561010657600080fd5b5061011a6101153660046113ad565b61036d565b6040516100a1919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a09182015115159181019190915260c00190565b34801561017f57600080fd5b506100ca61018e3660046113ad565b61041f565b6100ca6101a13660046113ad565b610533565b3480156101b257600080fd5b506100ca6101c1366004611365565b610cbb565b60006301ffc9a760e01b6001600160e01b03198316145b92915050565b60006101ef8585610326565b600081815260016020526040902060058101549192509060ff1661022e5760405162461bcd60e51b8152600401610225906113d9565b60405180910390fd5b60028101546001600160a01b031633146102775760405162461bcd60e51b815260206004820152600a6024820152692737ba1039b2b63632b960b11b6044820152606401610225565b600083116102b75760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610225565b6003810180546001600160a01b0319166001600160a01b038681169182179092556004830185905560408051868152602081019290925287928916917f3199bfdff711ec1ab8ab8449dc3b8d3fa30a59861a734a9d26f7b1a38162df75910160405180910390a3505050505050565b6040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600160006103ad8585610326565b81526020808201929092526040908101600020815160c08101835281546001600160a01b0390811682526001830154948201949094526002820154841692810192909252600381015490921660608201526004820154608082015260059091015460ff16151560a08201529392505050565b600061042b8383610326565b600081815260016020526040902060058101549192509060ff166104615760405162461bcd60e51b8152600401610225906113d9565b60028101546001600160a01b031633146104aa5760405162461bcd60e51b815260206004820152600a6024820152692737ba1039b2b63632b960b11b6044820152606401610225565b600082815260016020819052604080832080546001600160a01b0319908116825592810184905560028101805484169055600381018054909316909255600482018390556005909101805460ff191690555184916001600160a01b038716917f3267ca70878aeda07084f851ec813390240ed2e92e29d57bf4b46f569293d85f9190a350505050565b61053b610fe4565b60006105478383610326565b600081815260016020818152604092839020835160c08101855281546001600160a01b03908116825293820154928101929092526002810154831693820193909352600383015490911660608201526004820154608082015260059091015460ff16151560a08201819052919250906105d25760405162461bcd60e51b8152600401610225906113d9565b60408101516001600160a01b031661061e5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206c697374696e6760881b6044820152606401610225565b336001600160a01b031681604001516001600160a01b0316036106775760405162461bcd60e51b815260206004820152601160248201527053656c6c65722063616e6e6f742062757960781b6044820152606401610225565b6040516331a9108f60e11b8152600481018490526000906001600160a01b03861690636352211e90602401602060405180830381865afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e391906113fd565b905081604001516001600160a01b0316816001600160a01b03161461074a5760405162461bcd60e51b815260206004820152601b60248201527f53656c6c6572206e6f206c6f6e676572206f776e7320746f6b656e00000000006044820152606401610225565b60405163020604bf60e21b81526004810185905230906001600160a01b0387169063081812fc90602401602060405180830381865afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906113fd565b6001600160a01b03161480610835575060405163e985e9c560e01b81526001600160a01b03828116600483015230602483015286169063e985e9c590604401602060405180830381865afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610835919061141a565b6108775760405162461bcd60e51b815260206004820152601360248201527213585c9ad95d081b9bdd08185c1c1c9bdd9959606a1b6044820152606401610225565b6000806108898787866080015161100e565b606086015191935091506001600160a01b0316610b095783608001513410156108e75760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610225565b6000811180156108ff57506001600160a01b03821615155b156109a9576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610951576040519150601f19603f3d011682016040523d82523d6000602084013e610956565b606091505b50509050806109a75760405162461bcd60e51b815260206004820152601760248201527f526f79616c7479207472616e73666572206661696c65640000000000000000006044820152606401610225565b505b60008185608001516109bb919061143c565b9050600085604001516001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a0e576040519150601f19603f3d011682016040523d82523d6000602084013e610a13565b606091505b5050905080610a5d5760405162461bcd60e51b815260206004820152601660248201527514d95b1b195c881d1c985b9cd9995c8819985a5b195960521b6044820152606401610225565b6000866080015134610a6f919061143c565b90508015610b0157604051600090339083908381818185875af1925050503d8060008114610ab9576040519150601f19603f3d011682016040523d82523d6000602084013e610abe565b606091505b5050905080610aff5760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606401610225565b505b505050610b77565b600081118015610b2157506001600160a01b03821615155b15610b40576060840151610b40906001600160a01b0316338484611124565b6000818560800151610b52919061143c565b60408601516060870151919250610b75916001600160a01b031690339084611124565b505b6040848101519051632142170760e11b81526001600160a01b03918216600482015233602482015260448101889052908816906342842e0e90606401600060405180830381600087803b158015610bcd57600080fd5b505af1158015610be1573d6000803e3d6000fd5b505050600086815260016020818152604080842080546001600160a01b031990811682559381018590556002810180548516905560038101805490941690935560048301939093556005909101805460ff19169055868201516060808901516080808b015186516001600160a01b03958616815292851695830195909552948101939093528682169083015291810184905233925088918a16907f0b8205161262396a4ea169ec2bd14ff7d076f69f9317d8bb3735ad8c4fa14d029060a00160405180910390a45050505050610cb76001600055565b5050565b60008111610cfb5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610225565b6040516331a9108f60e11b8152600481018490526000906001600160a01b03861690636352211e90602401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6791906113fd565b90506001600160a01b0381163314610db35760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606401610225565b60405163020604bf60e21b81526004810185905230906001600160a01b0387169063081812fc90602401602060405180830381865afa158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e91906113fd565b6001600160a01b03161480610e9e575060405163e985e9c560e01b81526001600160a01b03828116600483015230602483015286169063e985e9c590604401602060405180830381865afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e919061141a565b610ee05760405162461bcd60e51b815260206004820152601360248201527213585c9ad95d081b9bdd08185c1c1c9bdd9959606a1b6044820152606401610225565b6000610eec8686610326565b6040805160c0810182526001600160a01b0389811680835260208084018b8152338587018181528c861660608801818152608089018e8152600160a08b0181815260008e8152828a528d90209b518c546001600160a01b0319908116918d16919091178d559751918c0191909155935160028b0180548816918b16919091179055905160038a0180549096169816979097179093559451600487015593516005909501805460ff1916951515959095179094558451938452830188905293945092889290917f462ae7fe8ebe6dca41694814c3bef6023e5166a98d66314d9bedef1a9e5a561a910160405180910390a4505050505050565b60026000540361100757604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516301ffc9a760e01b815263152a902d60e11b600482015260009081906001600160a01b038616906301ffc9a790602401602060405180830381865afa92505050801561107a575060408051601f3d908101601f191682019092526110779181019061141a565b60015b6110895750600090508061111c565b80156111135760405163152a902d60e11b815260048101869052602481018590526001600160a01b03871690632a55205a906044016040805180830381865afa9250505080156110f6575060408051601f3d908101601f191682019092526110f39181019061145d565b60015b61110757600080925092505061111c565b909350915061111c9050565b60008092509250505b935093915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261117e908590611184565b50505050565b60006111996001600160a01b038416836111ec565b905080516000141580156111be5750808060200190518101906111bc919061141a565b155b156111e757604051635274afe760e01b81526001600160a01b0384166004820152602401610225565b505050565b60606111fa83836000611201565b9392505050565b6060814710156112265760405163cd78605960e01b8152306004820152602401610225565b600080856001600160a01b03168486604051611242919061148b565b60006040518083038185875af1925050503d806000811461127f576040519150601f19603f3d011682016040523d82523d6000602084013e611284565b606091505b509150915061129486838361129e565b9695505050505050565b6060826112b3576112ae826112fa565b6111fa565b81511580156112ca57506001600160a01b0384163b155b156112f357604051639996b31560e01b81526001600160a01b0385166004820152602401610225565b50806111fa565b80511561130a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60006020828403121561133857600080fd5b81356001600160e01b0319811681146111fa57600080fd5b6001600160a01b038116811461132357600080fd5b6000806000806080858703121561137b57600080fd5b843561138681611350565b935060208501359250604085013561139d81611350565b9396929550929360600135925050565b600080604083850312156113c057600080fd5b82356113cb81611350565b946020939093013593505050565b6020808252600a9082015269139bdd081b1a5cdd195960b21b604082015260600190565b60006020828403121561140f57600080fd5b81516111fa81611350565b60006020828403121561142c57600080fd5b815180151581146111fa57600080fd5b818103818111156101dd57634e487b7160e01b600052601160045260246000fd5b6000806040838503121561147057600080fd5b825161147b81611350565b6020939093015192949293505050565b6000825160005b818110156114ac5760208186018101518583015201611492565b50600092019182525091905056fea2646970667358221220fbe7cf6717df87b34c6d025ae0c64c269809b488cc07cb2ed3fc6432894d91d764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c806388700d1c1161004e57806388700d1c146100fa57806398590ef914610173578063cce7ec1314610193578063ea8cdb1f146101a657600080fd5b806301ffc9a71461007557806330f0d2cb146100aa5780637d1b0a44146100cc575b600080fd5b34801561008157600080fd5b50610095610090366004611326565b6101c6565b60405190151581526020015b60405180910390f35b3480156100b657600080fd5b506100ca6100c5366004611365565b6101e3565b005b3480156100d857600080fd5b506100ec6100e73660046113ad565b610326565b6040519081526020016100a1565b34801561010657600080fd5b5061011a6101153660046113ad565b61036d565b6040516100a1919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a09182015115159181019190915260c00190565b34801561017f57600080fd5b506100ca61018e3660046113ad565b61041f565b6100ca6101a13660046113ad565b610533565b3480156101b257600080fd5b506100ca6101c1366004611365565b610cbb565b60006301ffc9a760e01b6001600160e01b03198316145b92915050565b60006101ef8585610326565b600081815260016020526040902060058101549192509060ff1661022e5760405162461bcd60e51b8152600401610225906113d9565b60405180910390fd5b60028101546001600160a01b031633146102775760405162461bcd60e51b815260206004820152600a6024820152692737ba1039b2b63632b960b11b6044820152606401610225565b600083116102b75760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610225565b6003810180546001600160a01b0319166001600160a01b038681169182179092556004830185905560408051868152602081019290925287928916917f3199bfdff711ec1ab8ab8449dc3b8d3fa30a59861a734a9d26f7b1a38162df75910160405180910390a3505050505050565b6040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600160006103ad8585610326565b81526020808201929092526040908101600020815160c08101835281546001600160a01b0390811682526001830154948201949094526002820154841692810192909252600381015490921660608201526004820154608082015260059091015460ff16151560a08201529392505050565b600061042b8383610326565b600081815260016020526040902060058101549192509060ff166104615760405162461bcd60e51b8152600401610225906113d9565b60028101546001600160a01b031633146104aa5760405162461bcd60e51b815260206004820152600a6024820152692737ba1039b2b63632b960b11b6044820152606401610225565b600082815260016020819052604080832080546001600160a01b0319908116825592810184905560028101805484169055600381018054909316909255600482018390556005909101805460ff191690555184916001600160a01b038716917f3267ca70878aeda07084f851ec813390240ed2e92e29d57bf4b46f569293d85f9190a350505050565b61053b610fe4565b60006105478383610326565b600081815260016020818152604092839020835160c08101855281546001600160a01b03908116825293820154928101929092526002810154831693820193909352600383015490911660608201526004820154608082015260059091015460ff16151560a08201819052919250906105d25760405162461bcd60e51b8152600401610225906113d9565b60408101516001600160a01b031661061e5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206c697374696e6760881b6044820152606401610225565b336001600160a01b031681604001516001600160a01b0316036106775760405162461bcd60e51b815260206004820152601160248201527053656c6c65722063616e6e6f742062757960781b6044820152606401610225565b6040516331a9108f60e11b8152600481018490526000906001600160a01b03861690636352211e90602401602060405180830381865afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e391906113fd565b905081604001516001600160a01b0316816001600160a01b03161461074a5760405162461bcd60e51b815260206004820152601b60248201527f53656c6c6572206e6f206c6f6e676572206f776e7320746f6b656e00000000006044820152606401610225565b60405163020604bf60e21b81526004810185905230906001600160a01b0387169063081812fc90602401602060405180830381865afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906113fd565b6001600160a01b03161480610835575060405163e985e9c560e01b81526001600160a01b03828116600483015230602483015286169063e985e9c590604401602060405180830381865afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610835919061141a565b6108775760405162461bcd60e51b815260206004820152601360248201527213585c9ad95d081b9bdd08185c1c1c9bdd9959606a1b6044820152606401610225565b6000806108898787866080015161100e565b606086015191935091506001600160a01b0316610b095783608001513410156108e75760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610225565b6000811180156108ff57506001600160a01b03821615155b156109a9576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610951576040519150601f19603f3d011682016040523d82523d6000602084013e610956565b606091505b50509050806109a75760405162461bcd60e51b815260206004820152601760248201527f526f79616c7479207472616e73666572206661696c65640000000000000000006044820152606401610225565b505b60008185608001516109bb919061143c565b9050600085604001516001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a0e576040519150601f19603f3d011682016040523d82523d6000602084013e610a13565b606091505b5050905080610a5d5760405162461bcd60e51b815260206004820152601660248201527514d95b1b195c881d1c985b9cd9995c8819985a5b195960521b6044820152606401610225565b6000866080015134610a6f919061143c565b90508015610b0157604051600090339083908381818185875af1925050503d8060008114610ab9576040519150601f19603f3d011682016040523d82523d6000602084013e610abe565b606091505b5050905080610aff5760405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606401610225565b505b505050610b77565b600081118015610b2157506001600160a01b03821615155b15610b40576060840151610b40906001600160a01b0316338484611124565b6000818560800151610b52919061143c565b60408601516060870151919250610b75916001600160a01b031690339084611124565b505b6040848101519051632142170760e11b81526001600160a01b03918216600482015233602482015260448101889052908816906342842e0e90606401600060405180830381600087803b158015610bcd57600080fd5b505af1158015610be1573d6000803e3d6000fd5b505050600086815260016020818152604080842080546001600160a01b031990811682559381018590556002810180548516905560038101805490941690935560048301939093556005909101805460ff19169055868201516060808901516080808b015186516001600160a01b03958616815292851695830195909552948101939093528682169083015291810184905233925088918a16907f0b8205161262396a4ea169ec2bd14ff7d076f69f9317d8bb3735ad8c4fa14d029060a00160405180910390a45050505050610cb76001600055565b5050565b60008111610cfb5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610225565b6040516331a9108f60e11b8152600481018490526000906001600160a01b03861690636352211e90602401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6791906113fd565b90506001600160a01b0381163314610db35760405162461bcd60e51b815260206004820152600f60248201526e2737ba103a37b5b2b71037bbb732b960891b6044820152606401610225565b60405163020604bf60e21b81526004810185905230906001600160a01b0387169063081812fc90602401602060405180830381865afa158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e91906113fd565b6001600160a01b03161480610e9e575060405163e985e9c560e01b81526001600160a01b03828116600483015230602483015286169063e985e9c590604401602060405180830381865afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e919061141a565b610ee05760405162461bcd60e51b815260206004820152601360248201527213585c9ad95d081b9bdd08185c1c1c9bdd9959606a1b6044820152606401610225565b6000610eec8686610326565b6040805160c0810182526001600160a01b0389811680835260208084018b8152338587018181528c861660608801818152608089018e8152600160a08b0181815260008e8152828a528d90209b518c546001600160a01b0319908116918d16919091178d559751918c0191909155935160028b0180548816918b16919091179055905160038a0180549096169816979097179093559451600487015593516005909501805460ff1916951515959095179094558451938452830188905293945092889290917f462ae7fe8ebe6dca41694814c3bef6023e5166a98d66314d9bedef1a9e5a561a910160405180910390a4505050505050565b60026000540361100757604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516301ffc9a760e01b815263152a902d60e11b600482015260009081906001600160a01b038616906301ffc9a790602401602060405180830381865afa92505050801561107a575060408051601f3d908101601f191682019092526110779181019061141a565b60015b6110895750600090508061111c565b80156111135760405163152a902d60e11b815260048101869052602481018590526001600160a01b03871690632a55205a906044016040805180830381865afa9250505080156110f6575060408051601f3d908101601f191682019092526110f39181019061145d565b60015b61110757600080925092505061111c565b909350915061111c9050565b60008092509250505b935093915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261117e908590611184565b50505050565b60006111996001600160a01b038416836111ec565b905080516000141580156111be5750808060200190518101906111bc919061141a565b155b156111e757604051635274afe760e01b81526001600160a01b0384166004820152602401610225565b505050565b60606111fa83836000611201565b9392505050565b6060814710156112265760405163cd78605960e01b8152306004820152602401610225565b600080856001600160a01b03168486604051611242919061148b565b60006040518083038185875af1925050503d806000811461127f576040519150601f19603f3d011682016040523d82523d6000602084013e611284565b606091505b509150915061129486838361129e565b9695505050505050565b6060826112b3576112ae826112fa565b6111fa565b81511580156112ca57506001600160a01b0384163b155b156112f357604051639996b31560e01b81526001600160a01b0385166004820152602401610225565b50806111fa565b80511561130a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60006020828403121561133857600080fd5b81356001600160e01b0319811681146111fa57600080fd5b6001600160a01b038116811461132357600080fd5b6000806000806080858703121561137b57600080fd5b843561138681611350565b935060208501359250604085013561139d81611350565b9396929550929360600135925050565b600080604083850312156113c057600080fd5b82356113cb81611350565b946020939093013593505050565b6020808252600a9082015269139bdd081b1a5cdd195960b21b604082015260600190565b60006020828403121561140f57600080fd5b81516111fa81611350565b60006020828403121561142c57600080fd5b815180151581146111fa57600080fd5b818103818111156101dd57634e487b7160e01b600052601160045260246000fd5b6000806040838503121561147057600080fd5b825161147b81611350565b6020939093015192949293505050565b6000825160005b818110156114ac5760208186018101518583015201611492565b50600092019182525091905056fea2646970667358221220fbe7cf6717df87b34c6d025ae0c64c269809b488cc07cb2ed3fc6432894d91d764736f6c63430008140033",
  "devdoc": {
    "details": "极简定价挂单市场： - 卖家创建挂单（仅记录，不托管 NFT），购买时校验所有权/授权 - 支持 ETH 或 ERC20 结算 - 若 NFT 支持 ERC-2981，则在成交时自动支付版税",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "buy(address,uint256)": {
        "details": "购买： - 校验仍由卖家持有且市场仍被授权 - 若 NFT 支持 ERC-2981，则计算并支付版税 - 将剩余款项支付给卖家 - 完成 NFT 转移"
      },
      "cancel(address,uint256)": {
        "details": "取消挂单（仅卖家）"
      },
      "list(address,uint256,address,uint256)": {
        "details": "创建挂单（不托管 NFT）。要求： - msg.sender 是当前所有者，或已被授权为 operator（setApprovalForAll 或 approve） - price > 0"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "update(address,uint256,address,uint256)": {
        "details": "更新价格或币种（仅卖家）"
      }
    },
    "title": "SimpleFixedPriceMarket",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 933,
        "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
        "label": "listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Listing)928_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Listing)928_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SimpleFixedPriceMarket.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)928_storage"
      },
      "t_struct(Listing)928_storage": {
        "encoding": "inplace",
        "label": "struct SimpleFixedPriceMarket.Listing",
        "members": [
          {
            "astId": 917,
            "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
            "label": "nft",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 919,
            "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 921,
            "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
            "label": "seller",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 923,
            "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
            "label": "currency",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 925,
            "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 927,
            "contract": "contracts/SimpleFixedPriceMarket.sol:SimpleFixedPriceMarket",
            "label": "active",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}