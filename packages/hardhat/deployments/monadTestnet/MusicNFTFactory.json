{
  "address": "0xA28040417C6D998Bd4F276333a91877F66E943aB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "MusicNFTSystemDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "deployMusicNFTSystem",
      "outputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deployedSystems",
      "outputs": [
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDeployedSystems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct MusicNFTFactory.DeployedSystem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDeployedSystemsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65e4ab82ffa017a895ce158ca7be60c89579c4b275dbb254a1b62c4a94e5e1f1",
  "receipt": {
    "to": null,
    "from": "0xa1adE6E2d53C54aa98159687bdB0761e513b94B8",
    "contractAddress": "0xA28040417C6D998Bd4F276333a91877F66E943aB",
    "transactionIndex": 10,
    "gasUsed": "4745645",
    "logsBloom": "0x
    "blockHash": "0xbe83b3ca7c4048a8c14deae42f57a408debd58c08b8b8936fd98c1943bc8faa3",
    "transactionHash": "0x65e4ab82ffa017a895ce158ca7be60c89579c4b275dbb254a1b62c4a94e5e1f1",
    "logs": [],
    "blockNumber": 31071638,
    "cumulativeGasUsed": "6124689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c9fb06739d01146d2b9fa445348422ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"MusicNFTSystemDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"deployMusicNFTSystem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployedSystems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDeployedSystems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MusicNFTFactory.DeployedSystem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDeployedSystemsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u97f3\\u4e50NFT\\u7cfb\\u7edf\\u5de5\\u5382\\u5408\\u7ea6\\uff0c\\u7528\\u4e8e\\u4e00\\u952e\\u90e8\\u7f72\\u5b8c\\u6574\\u7cfb\\u7edf\",\"kind\":\"dev\",\"methods\":{\"deployMusicNFTSystem(string,string,string)\":{\"details\":\"\\u90e8\\u7f72\\u5b8c\\u6574\\u7684\\u97f3\\u4e50NFT\\u7cfb\\u7edf\"},\"getDeployedSystems(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237\\u90e8\\u7f72\\u7684\\u7cfb\\u7edf\"},\"getDeployedSystemsCount(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237\\u90e8\\u7f72\\u7684\\u7cfb\\u7edf\\u6570\\u91cf\"}},\"title\":\"MusicNFTFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MusicNFTFactory.sol\":\"MusicNFTFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Music721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./MusicRevenueVault.sol\\\";\\n\\n/**\\n * @title Music721\\n * @dev \\u7b80\\u5316\\u7684\\u97f3\\u4e50NFT\\u5408\\u7ea6\\uff0c\\u5355\\u4e00\\u97f3\\u4e50\\u4f5c\\u54c1\\u7684\\u591a\\u4efdNFT\\n */\\ncontract Music721 is\\n    ERC721,\\n    ERC721Enumerable,\\n    IERC2981,\\n    Ownable,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // \\u97f3\\u4e50\\u4f5c\\u54c1\\u4fe1\\u606f\\n    struct MusicInfo {\\n        string title; // \\u6b4c\\u66f2\\u6807\\u9898\\n        string artist; // \\u827a\\u672f\\u5bb6\\n        string uriCID; // IPFS/Arweave CID\\n        uint256 maxSupply; // \\u6700\\u5927\\u4f9b\\u5e94\\u91cf\\n        uint256 price; // \\u5355\\u4ef7\\n        address currency; // ETH or ERC20\\n        uint96 royaltyBps; // ERC-2981 \\u4e8c\\u7ea7\\u5e02\\u573a\\u5206\\u6210 (\\u57fa\\u70b9)\\n        address vault; // RevenueVault \\u5730\\u5740\\n        bool mintActive; // \\u662f\\u5426\\u53ef\\u94f8\\u9020\\n    }\\n\\n    // \\u97f3\\u4e50\\u4f5c\\u54c1\\u4fe1\\u606f\\n    MusicInfo public musicInfo;\\n\\n    // \\u4e0b\\u4e00\\u4e2a\\u53ef\\u7528\\u7684 tokenId\\n    uint256 public nextTokenId = 1;\\n\\n    // \\u57fa\\u7840URI\\n    string private _baseTokenURI;\\n\\n    event MusicInfoSet(\\n        string title,\\n        string artist,\\n        uint256 maxSupply,\\n        uint256 price,\\n        address currency\\n    );\\n\\n    event TokenMinted(\\n        uint256 indexed tokenId,\\n        address indexed to,\\n        uint256 quantity\\n    );\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI\\n    ) ERC721(name, symbol) Ownable(msg.sender) {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u97f3\\u4e50\\u4f5c\\u54c1\\u4fe1\\u606f\\uff08\\u4ec5\\u9650owner\\uff0c\\u53ea\\u80fd\\u8bbe\\u7f6e\\u4e00\\u6b21\\uff09\\n     */\\n    function setMusicInfo(\\n        string memory title,\\n        string memory artist,\\n        string memory uriCID,\\n        uint256 maxSupply,\\n        uint256 price,\\n        address currency,\\n        uint96 royaltyBps,\\n        address vault\\n    ) external onlyOwner {\\n        require(bytes(musicInfo.title).length == 0, \\\"Music info already set\\\");\\n        require(maxSupply > 0, \\\"Max supply must be > 0\\\");\\n        require(royaltyBps <= 1000, \\\"Royalty too high\\\"); // \\u6700\\u592710%\\n        require(vault != address(0), \\\"Invalid vault address\\\");\\n\\n        musicInfo = MusicInfo({\\n            title: title,\\n            artist: artist,\\n            uriCID: uriCID,\\n            maxSupply: maxSupply,\\n            price: price,\\n            currency: currency,\\n            royaltyBps: royaltyBps,\\n            vault: vault,\\n            mintActive: true\\n        });\\n\\n        emit MusicInfoSet(title, artist, maxSupply, price, currency);\\n    }\\n\\n    /**\\n     * @dev \\u94f8\\u9020NFT\\n     */\\n    function mint(uint256 quantity) external payable nonReentrant {\\n        require(musicInfo.mintActive, \\\"Minting not active\\\");\\n        require(quantity > 0, \\\"Quantity must be > 0\\\");\\n        require(\\n            nextTokenId + quantity - 1 <= musicInfo.maxSupply,\\n            \\\"Exceeds max supply\\\"\\n        );\\n\\n        uint256 totalCost = musicInfo.price * quantity;\\n\\n        // \\u5904\\u7406\\u652f\\u4ed8\\n        if (musicInfo.currency == address(0)) {\\n            require(msg.value >= totalCost, \\\"Insufficient ETH\\\");\\n            if (msg.value > totalCost) {\\n                payable(msg.sender).transfer(msg.value - totalCost);\\n            }\\n        } else {\\n            IERC20(musicInfo.currency).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                totalCost\\n            );\\n        }\\n\\n        // \\u94f8\\u9020NFT\\n        uint256 startTokenId = nextTokenId;\\n        for (uint256 i = 0; i < quantity; i++) {\\n            uint256 tokenId = nextTokenId++;\\n            _safeMint(msg.sender, tokenId);\\n        }\\n\\n        // \\u5c06\\u6536\\u76ca\\u53d1\\u9001\\u5230\\u91d1\\u5e93\\n        _sendRevenueToVault(musicInfo.currency, totalCost, \\\"mint\\\");\\n\\n        emit TokenMinted(startTokenId, msg.sender, quantity);\\n    }\\n\\n    /**\\n     * @dev \\u6279\\u91cf\\u94f8\\u9020\\uff08\\u4ec5\\u9650owner\\uff09\\n     */\\n    function mintBatch(\\n        address[] memory recipients,\\n        uint256[] memory quantities\\n    ) external onlyOwner {\\n        require(\\n            recipients.length == quantities.length,\\n            \\\"Arrays length mismatch\\\"\\n        );\\n        require(musicInfo.mintActive, \\\"Minting not active\\\");\\n\\n        uint256 totalQuantity = 0;\\n        for (uint256 i = 0; i < quantities.length; i++) {\\n            totalQuantity += quantities[i];\\n        }\\n        require(\\n            nextTokenId + totalQuantity - 1 <= musicInfo.maxSupply,\\n            \\\"Exceeds max supply\\\"\\n        );\\n\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            address recipient = recipients[i];\\n            uint256 quantity = quantities[i];\\n\\n            for (uint256 j = 0; j < quantity; j++) {\\n                uint256 tokenId = nextTokenId++;\\n                _safeMint(recipient, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u94f8\\u9020\\u72b6\\u6001\\n     */\\n    function setMintActive(bool active) external onlyOwner {\\n        require(bytes(musicInfo.title).length > 0, \\\"Music info not set\\\");\\n        musicInfo.mintActive = active;\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0\\u4ef7\\u683c\\n     */\\n    function updatePrice(uint256 newPrice) external onlyOwner {\\n        require(bytes(musicInfo.title).length > 0, \\\"Music info not set\\\");\\n        musicInfo.price = newPrice;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u5df2\\u94f8\\u9020\\u6570\\u91cf\\n     */\\n    function getMintedSupply() external view returns (uint256) {\\n        return nextTokenId - 1;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u5269\\u4f59\\u53ef\\u94f8\\u9020\\u6570\\u91cf\\n     */\\n    function getRemainingSupply() external view returns (uint256) {\\n        return musicInfo.maxSupply - (nextTokenId - 1);\\n    }\\n\\n    /**\\n     * @dev \\u91cd\\u5199_increaseBalance\\u4ee5\\u652f\\u6301ERC721Enumerable\\n     */\\n    function _increaseBalance(\\n        address account,\\n        uint128 value\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    /**\\n     * @dev \\u91cd\\u5199_update\\u4ee5\\u652f\\u6301ERC721Enumerable\\n     */\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    /**\\n     * @dev ERC-2981 \\u7248\\u7a0e\\u4fe1\\u606f\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view override returns (address, uint256) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token not exists\\\");\\n\\n        uint256 royaltyAmount = (salePrice * musicInfo.royaltyBps) / 10000;\\n        return (musicInfo.vault, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev \\u652f\\u6301\\u7684\\u63a5\\u53e3\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, ERC721Enumerable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6token URI\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        require(_ownerOf(tokenId) != address(0), \\\"Token not exists\\\");\\n\\n        return string(abi.encodePacked(_baseTokenURI, musicInfo.uriCID));\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u57fa\\u7840URI\\n     */\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev \\u5185\\u90e8\\u51fd\\u6570\\uff1a\\u53d1\\u9001\\u6536\\u76ca\\u5230\\u91d1\\u5e93\\n     */\\n    function _sendRevenueToVault(\\n        address currency,\\n        uint256 amount,\\n        string memory source\\n    ) internal {\\n        if (currency == address(0)) {\\n            // ETH\\n            MusicRevenueVault(payable(musicInfo.vault)).receiveRevenue{\\n                value: amount\\n            }(\\n                1,\\n                currency,\\n                amount,\\n                source // \\u4f7f\\u7528\\u56fa\\u5b9a\\u7684editionId = 1\\n            );\\n        } else {\\n            // ERC20\\n            IERC20(currency).forceApprove(musicInfo.vault, amount);\\n            MusicRevenueVault(payable(musicInfo.vault)).receiveRevenue(\\n                1,\\n                currency,\\n                amount,\\n                source\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u7d27\\u6025\\u63d0\\u53d6\\u51fd\\u6570\\uff08\\u4ec5\\u9650owner\\uff09\\n     */\\n    function emergencyWithdraw(\\n        address token,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (token == address(0)) {\\n            payable(owner()).transfer(amount);\\n        } else {\\n            IERC20(token).safeTransfer(owner(), amount);\\n        }\\n    }\\n\\n    // \\u63a5\\u6536ETH\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xbf9623fc4370dbf2d72ac777a6362d268e4aec3fc39c78d500a74d5052837b97\",\"license\":\"MIT\"},\"contracts/MusicNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Music721.sol\\\";\\nimport \\\"./MusicRevenueVault.sol\\\";\\n\\n/**\\n * @title MusicNFTFactory\\n * @dev \\u97f3\\u4e50NFT\\u7cfb\\u7edf\\u5de5\\u5382\\u5408\\u7ea6\\uff0c\\u7528\\u4e8e\\u4e00\\u952e\\u90e8\\u7f72\\u5b8c\\u6574\\u7cfb\\u7edf\\n */\\ncontract MusicNFTFactory {\\n    event MusicNFTSystemDeployed(\\n        address indexed creator,\\n        address nftContract,\\n        address vault,\\n        string name,\\n        string symbol\\n    );\\n\\n    struct DeployedSystem {\\n        address nftContract;\\n        address vault;\\n        uint256 timestamp;\\n    }\\n\\n    mapping(address => DeployedSystem[]) public deployedSystems;\\n\\n    /**\\n     * @dev \\u90e8\\u7f72\\u5b8c\\u6574\\u7684\\u97f3\\u4e50NFT\\u7cfb\\u7edf\\n     */\\n    function deployMusicNFTSystem(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseURI\\n    ) external returns (address nftContract, address vault) {\\n        // 1. \\u90e8\\u7f72\\u6536\\u76ca\\u91d1\\u5e93\\n        vault = address(new MusicRevenueVault(address(0))); // \\u5148\\u4f20\\u5165\\u96f6\\u5730\\u5740\\uff0c\\u7a0d\\u540e\\u66f4\\u65b0\\n\\n        // 2. \\u90e8\\u7f72NFT\\u5408\\u7ea6\\n        nftContract = address(new Music721(name, symbol, baseURI));\\n\\n        // 3. \\u66f4\\u65b0\\u91d1\\u5e93\\u7684NFT\\u5408\\u7ea6\\u5730\\u5740\\n        MusicRevenueVault(payable(vault)).transferOwnership(msg.sender);\\n        \\n        // 4. \\u8f6c\\u79fbNFT\\u5408\\u7ea6\\u6240\\u6709\\u6743\\n        Music721(payable(nftContract)).transferOwnership(msg.sender);\\n\\n        // 5. \\u8bb0\\u5f55\\u90e8\\u7f72\\u4fe1\\u606f\\n        deployedSystems[msg.sender].push(DeployedSystem({\\n            nftContract: nftContract,\\n            vault: vault,\\n            timestamp: block.timestamp\\n        }));\\n\\n        emit MusicNFTSystemDeployed(msg.sender, nftContract, vault, name, symbol);\\n\\n        return (nftContract, vault);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u90e8\\u7f72\\u7684\\u7cfb\\u7edf\\n     */\\n    function getDeployedSystems(address user) external view returns (DeployedSystem[] memory) {\\n        return deployedSystems[user];\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u90e8\\u7f72\\u7684\\u7cfb\\u7edf\\u6570\\u91cf\\n     */\\n    function getDeployedSystemsCount(address user) external view returns (uint256) {\\n        return deployedSystems[user].length;\\n    }\\n}\",\"keccak256\":\"0x7534b2eee942023fd2672a43ebe7f1b641321d2197344fb9fe1f8f6f447c7c2a\",\"license\":\"MIT\"},\"contracts/MusicRevenueVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title MusicRevenueVault\\n * @dev \\u7b80\\u5316\\u7684\\u97f3\\u4e50\\u6536\\u76ca\\u5206\\u914d\\u91d1\\u5e93\\u5408\\u7ea6\\n * \\u6536\\u96c6\\u9500\\u552e\\u6b3e\\u9879\\u3001\\u4e8c\\u7ea7\\u5e02\\u573a\\u7248\\u7a0e\\u3001\\u5916\\u90e8\\u6536\\u5165\\uff0c\\u5e76\\u6309\\u6bd4\\u4f8b\\u5206\\u914d\\u7ed9\\u56e2\\u961f\\u548c\\u6301\\u6709\\u4eba\\n */\\ncontract MusicRevenueVault is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct TeamMember {\\n        address account;\\n        uint256 basisPoints; // \\u57fa\\u70b9\\uff0c10000 = 100%\\n        string role; // \\\"artist\\\", \\\"producer\\\", \\\"composer\\\" etc.\\n    }\\n\\n    struct RevenuePool {\\n        uint256 totalRevenue;\\n        uint256 teamClaimed;\\n        uint256 holdersClaimed;\\n        mapping(address => uint256) holderClaimed;\\n    }\\n\\n    // \\u56e2\\u961f\\u5206\\u8d26\\u914d\\u7f6e\\n    TeamMember[] public teamMembers;\\n    uint256 public teamTotalBps; // \\u56e2\\u961f\\u603b\\u5206\\u6210\\u57fa\\u70b9\\n    uint256 public holdersBps; // \\u6301\\u6709\\u4eba\\u5206\\u6210\\u57fa\\u70b9\\n\\n    // \\u6536\\u76ca\\u6c60 - \\u7b80\\u5316\\u4e3a\\u5355\\u4e00\\u6c60\\u5b50\\uff08editionId = 1\\uff09\\n    mapping(uint256 => RevenuePool) public revenuePools;\\n    \\n    // NFT\\u5408\\u7ea6\\u5730\\u5740\\n    address public nftContract;\\n    \\n    // \\u652f\\u6301\\u7684\\u4ee3\\u5e01\\n    mapping(address => bool) public supportedTokens;\\n\\n    event RevenueReceived(uint256 indexed editionId, address token, uint256 amount, string source);\\n    event TeamClaimed(address indexed member, uint256 indexed editionId, address token, uint256 amount);\\n    event HolderClaimed(address indexed holder, uint256 indexed editionId, address token, uint256 amount);\\n    event TeamMemberAdded(address indexed account, uint256 basisPoints, string role);\\n\\n    constructor(address _nftContract) Ownable(msg.sender) {\\n        nftContract = _nftContract;\\n        supportedTokens[address(0)] = true; // ETH\\n    }\\n\\n    /**\\n     * @dev \\u6dfb\\u52a0\\u56e2\\u961f\\u6210\\u5458\\n     */\\n    function addTeamMember(address account, uint256 basisPoints, string memory role) external onlyOwner {\\n        require(account != address(0), \\\"Invalid address\\\");\\n        require(basisPoints > 0, \\\"Invalid basis points\\\");\\n        require(teamTotalBps + basisPoints <= 10000, \\\"Exceeds 100%\\\");\\n        \\n        teamMembers.push(TeamMember({\\n            account: account,\\n            basisPoints: basisPoints,\\n            role: role\\n        }));\\n        \\n        teamTotalBps += basisPoints;\\n        holdersBps = 10000 - teamTotalBps;\\n        \\n        emit TeamMemberAdded(account, basisPoints, role);\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u652f\\u6301\\u7684\\u4ee3\\u5e01\\n     */\\n    function setSupportedToken(address token, bool supported) external onlyOwner {\\n        supportedTokens[token] = supported;\\n    }\\n\\n    /**\\n     * @dev \\u63a5\\u6536\\u6536\\u76ca\\uff08\\u7531NFT\\u5408\\u7ea6\\u6216\\u9884\\u8a00\\u673a\\u8c03\\u7528\\uff09\\n     */\\n    function receiveRevenue(uint256 editionId, address token, uint256 amount, string memory source) external payable {\\n        require(msg.sender == nftContract || msg.sender == owner(), \\\"Unauthorized\\\");\\n        require(supportedTokens[token], \\\"Token not supported\\\");\\n        \\n        if (token == address(0)) {\\n            require(msg.value == amount, \\\"ETH amount mismatch\\\");\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n        \\n        revenuePools[editionId].totalRevenue += amount;\\n        \\n        emit RevenueReceived(editionId, token, amount, source);\\n    }\\n\\n    /**\\n     * @dev \\u56e2\\u961f\\u6210\\u5458\\u63d0\\u53d6\\u6536\\u76ca\\n     */\\n    function claimTeamRevenue(uint256 editionId, address token) external nonReentrant {\\n        uint256 memberIndex = _findTeamMemberIndex(msg.sender);\\n        require(memberIndex < teamMembers.length, \\\"Not a team member\\\");\\n        \\n        TeamMember memory member = teamMembers[memberIndex];\\n        RevenuePool storage pool = revenuePools[editionId];\\n        \\n        uint256 totalClaimable = (pool.totalRevenue * member.basisPoints) / 10000;\\n        uint256 alreadyClaimed = pool.holderClaimed[msg.sender];\\n        uint256 claimable = totalClaimable - alreadyClaimed;\\n        \\n        require(claimable > 0, \\\"Nothing to claim\\\");\\n        \\n        pool.holderClaimed[msg.sender] = totalClaimable;\\n        pool.teamClaimed += claimable;\\n        \\n        _transfer(token, msg.sender, claimable);\\n        \\n        emit TeamClaimed(msg.sender, editionId, token, claimable);\\n    }\\n\\n    /**\\n     * @dev \\u6301\\u6709\\u4eba\\u63d0\\u53d6\\u6536\\u76ca\\n     */\\n    function claimHolderRevenue(uint256 editionId, address token) external nonReentrant {\\n        // \\u83b7\\u53d6\\u6301\\u6709\\u6570\\u91cf\\uff08\\u76f4\\u63a5\\u8c03\\u7528ERC721\\u7684balanceOf\\uff09\\n        uint256 holderBalance = IERC721(nftContract).balanceOf(msg.sender);\\n        require(holderBalance > 0, \\\"No tokens held\\\");\\n        \\n        // \\u83b7\\u53d6\\u603b\\u4f9b\\u5e94\\u91cf\\n        uint256 totalSupply = IERC721Enumerable(nftContract).totalSupply();\\n        require(totalSupply > 0, \\\"No tokens minted\\\");\\n        \\n        RevenuePool storage pool = revenuePools[editionId];\\n        \\n        // \\u8ba1\\u7b97\\u6301\\u6709\\u4eba\\u5e94\\u5f97\\u7684\\u603b\\u6536\\u76ca\\n        uint256 holdersTotal = (pool.totalRevenue * holdersBps) / 10000;\\n        uint256 holderShare = (holdersTotal * holderBalance) / totalSupply;\\n        uint256 alreadyClaimed = pool.holderClaimed[msg.sender];\\n        uint256 claimable = holderShare - alreadyClaimed;\\n        \\n        require(claimable > 0, \\\"Nothing to claim\\\");\\n        \\n        pool.holderClaimed[msg.sender] = holderShare;\\n        pool.holdersClaimed += claimable;\\n        \\n        _transfer(token, msg.sender, claimable);\\n        \\n        emit HolderClaimed(msg.sender, editionId, token, claimable);\\n    }\\n\\n    /**\\n     * @dev \\u67e5\\u770b\\u53ef\\u63d0\\u53d6\\u7684\\u6536\\u76ca\\n     */\\n    function getClaimableRevenue(address account, uint256 editionId, address token) \\n        external view returns (uint256) {\\n        RevenuePool storage pool = revenuePools[editionId];\\n        \\n        // \\u68c0\\u67e5\\u662f\\u5426\\u4e3a\\u56e2\\u961f\\u6210\\u5458\\n        uint256 memberIndex = _findTeamMemberIndex(account);\\n        if (memberIndex < teamMembers.length) {\\n            TeamMember memory member = teamMembers[memberIndex];\\n            uint256 totalClaimable = (pool.totalRevenue * member.basisPoints) / 10000;\\n            return totalClaimable - pool.holderClaimed[account];\\n        }\\n        \\n        // \\u6301\\u6709\\u4eba\\u6536\\u76ca\\u8ba1\\u7b97\\n        uint256 holderBalance = IERC721(nftContract).balanceOf(account);\\n        if (holderBalance == 0) return 0;\\n        \\n        uint256 totalSupply = IERC721Enumerable(nftContract).totalSupply();\\n        if (totalSupply == 0) return 0;\\n        \\n        uint256 holdersTotal = (pool.totalRevenue * holdersBps) / 10000;\\n        uint256 holderShare = (holdersTotal * holderBalance) / totalSupply;\\n        \\n        return holderShare - pool.holderClaimed[account];\\n    }\\n\\n    /**\\n     * @dev \\u5185\\u90e8\\u51fd\\u6570\\uff1a\\u67e5\\u627e\\u56e2\\u961f\\u6210\\u5458\\u7d22\\u5f15\\n     */\\n    function _findTeamMemberIndex(address account) internal view returns (uint256) {\\n        for (uint256 i = 0; i < teamMembers.length; i++) {\\n            if (teamMembers[i].account == account) {\\n                return i;\\n            }\\n        }\\n        return type(uint256).max; // \\u672a\\u627e\\u5230\\n    }\\n\\n    /**\\n     * @dev \\u5185\\u90e8\\u51fd\\u6570\\uff1a\\u8f6c\\u8d26\\n     */\\n    function _transfer(address token, address to, uint256 amount) internal {\\n        if (token == address(0)) {\\n            payable(to).transfer(amount);\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u56e2\\u961f\\u6210\\u5458\\u4fe1\\u606f\\n     */\\n    function getTeamMembers() external view returns (TeamMember[] memory) {\\n        return teamMembers;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6536\\u76ca\\u6c60\\u4fe1\\u606f\\n     */\\n    function getRevenuePool(uint256 editionId) external view returns (\\n        uint256 totalRevenue,\\n        uint256 teamClaimed,\\n        uint256 holdersClaimed\\n    ) {\\n        RevenuePool storage pool = revenuePools[editionId];\\n        return (pool.totalRevenue, pool.teamClaimed, pool.holdersClaimed);\\n    }\\n\\n    // \\u63a5\\u6536ETH\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x43ad10ad948d39ad8d8ca521172c191f411079c804e643771988f921621e363f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615434806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c806339c12afd14620000575780637eddf36d1462000096578063d7b4e72214620000bc578063f4605ea314620000f4575b600080fd5b620000836200006836600462000458565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b620000ad620000a736600462000458565b62000132565b6040516200008d91906200047d565b620000d3620000cd3660046200058f565b620001cf565b604080516001600160a01b039384168152929091166020830152016200008d565b6200010b6200010536600462000621565b620003d1565b604080516001600160a01b039485168152939092166020840152908201526060016200008d565b6001600160a01b038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b82821015620001c4576000848152602090819020604080516060810182526003860290920180546001600160a01b0390811684526001808301549091168486015260029091015491830191909152908352909201910162000168565b505050509050919050565b6000806000604051620001e2906200041f565b6001600160a01b039091168152602001604051809103906000f0801580156200020f573d6000803e3d6000fd5b50905084848460405162000223906200042d565b620002319392919062000696565b604051809103906000f0801580156200024e573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529092506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b1580156200029457600080fd5b505af1158015620002a9573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038516925063f2fde38b9150602401600060405180830381600087803b158015620002ef57600080fd5b505af115801562000304573d6000803e3d6000fd5b50503360008181526020818152604080832081516060810183526001600160a01b038a8116825289811682860190815242838601908152845460018181018755958952969097209251600390960290920180549582166001600160a01b0319968716178155915192820180549390911692909416919091179092559151600290910155519092507fd32cacde3f4023023e5c5a902ded72f1e0448c94eeaf241214ad50fd3d7d98869150620003c190859085908a908a90620006df565b60405180910390a2935093915050565b60006020528160005260406000208181548110620003ee57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b0391821694509116915083565b611cd2806200072d83390190565b61300080620023ff83390190565b80356001600160a01b03811681146200045357600080fd5b919050565b6000602082840312156200046b57600080fd5b62000476826200043b565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015620004d757815180516001600160a01b03908116865287820151168786015285015185850152606090930192908501906001016200049a565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200050c57600080fd5b813567ffffffffffffffff808211156200052a576200052a620004e4565b604051601f8301601f19908116603f01168101908282118183101715620005555762000555620004e4565b816040528381528660208588010111156200056f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215620005a557600080fd5b833567ffffffffffffffff80821115620005be57600080fd5b620005cc87838801620004fa565b94506020860135915080821115620005e357600080fd5b620005f187838801620004fa565b935060408601359150808211156200060857600080fd5b506200061786828701620004fa565b9150509250925092565b600080604083850312156200063557600080fd5b62000640836200043b565b946020939093013593505050565b6000815180845260005b81811015620006765760208185018101518683018201520162000658565b506000602082860101526020601f19601f83011685010191505092915050565b606081526000620006ab60608301866200064e565b8281036020840152620006bf81866200064e565b90508281036040840152620006d581856200064e565b9695505050505050565b6001600160a01b038581168252841660208201526080604082018190526000906200070d908301856200064e565b82810360608401526200072181856200064e565b97965050505050505056fe60806040523480156200001157600080fd5b5060405162001cd238038062001cd2833981016040819052620000349162000118565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000c8565b506001808055600680546001600160a01b0319166001600160a01b0393909316929092179091556000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df805460ff191690911790556200014a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200012b57600080fd5b81516001600160a01b03811681146200014357600080fd5b9392505050565b611b78806200015a6000396000f3fe6080604052600436106101025760003560e01c8063909db46d11610095578063e2ca3f5511610064578063e2ca3f5514610307578063e75f7ddb1461031a578063e798646614610349578063efded14714610369578063f2fde38b1461038b57600080fd5b8063909db46d146102775780639e98554f146102b1578063c0c7d092146102d1578063d56d229d146102e757600080fd5b806368c4ac26116100d157806368c4ac26146101da578063715018a61461021a5780638099c2791461022f5780638da5cb5b1461024557600080fd5b806301c788651461010e5780631d833fb41461013057806322d0bef5146101505780634bda1d381461018357600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e61012936600461159f565b6103ab565b005b34801561013c57600080fd5b5061012e61014b36600461166e565b61062d565b34801561015c57600080fd5b5061017061016b3660046116c5565b610854565b6040519081526020015b60405180910390f35b34801561018f57600080fd5b506101bf61019e366004611701565b60056020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161017a565b3480156101e657600080fd5b5061020a6101f536600461171a565b60076020526000908152604090205460ff1681565b604051901515815260200161017a565b34801561022657600080fd5b5061012e610b46565b34801561023b57600080fd5b5061017060045481565b34801561025157600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161017a565b34801561028357600080fd5b506101bf610292366004611701565b6000908152600560205260409020805460018201546002909201549092565b3480156102bd57600080fd5b5061012e6102cc36600461159f565b610b5a565b3480156102dd57600080fd5b5061017060035481565b3480156102f357600080fd5b5060065461025f906001600160a01b031681565b61012e610315366004611735565b610dfe565b34801561032657600080fd5b5061033a610335366004611701565b610f8e565b60405161017a939291906117e6565b34801561035557600080fd5b5061012e610364366004611824565b611057565b34801561037557600080fd5b5061037e61108a565b60405161017a919061185b565b34801561039757600080fd5b5061012e6103a636600461171a565b61119b565b6103b36111d9565b60006103be33611203565b600254909150811061040b5760405162461bcd60e51b81526020600482015260116024820152702737ba1030903a32b0b69036b2b6b132b960791b60448201526064015b60405180910390fd5b600060028281548110610420576104206118e3565b90600052602060002090600302016040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282018054610482906118f9565b80601f01602080910402602001604051908101604052809291908181526020018280546104ae906118f9565b80156104fb5780601f106104d0576101008083540402835291602001916104fb565b820191906000526020600020905b8154815290600101906020018083116104de57829003601f168201915b505050919092525050506000858152600560209081526040822090830151815493945090926127109161052d91611949565b6105379190611960565b3360009081526003840160205260408120549192506105568284611982565b90506000811161059b5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610402565b33600090815260038501602052604081208490556001850180548392906105c3908490611995565b909155506105d4905087338361126f565b604080516001600160a01b038916815260208101839052899133917fb8bf6f32bf7a488c04b5e5caca227daad3574ec9aae29bef6239adb4c1390f12910160405180910390a350505050505061062960018055565b5050565b6106356112d2565b6001600160a01b03831661067d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610402565b600082116106c45760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420626173697320706f696e747360601b6044820152606401610402565b612710826003546106d59190611995565b11156107125760405162461bcd60e51b815260206004820152600c60248201526b45786365656473203130302560a01b6044820152606401610402565b604080516060810182526001600160a01b038581168252602082018581529282018481526002805460018101825560009190915283517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600390920291820180546001600160a01b0319169190941617835593517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf85015551919290917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0909101906107de90826119f6565b50505081600360008282546107f39190611995565b909155505060035461080790612710611982565b6004556040516001600160a01b038416907f730e9e286c087db612ce57f4d5358c3ff01e9e890685ce2caadea0c06a1481bb906108479085908590611ab6565b60405180910390a2505050565b60008281526005602052604081208161086c86611203565b6002549091508110156109ca5760006002828154811061088e5761088e6118e3565b90600052602060002090600302016040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820180546108f0906118f9565b80601f016020809104026020016040519081016040528092919081815260200182805461091c906118f9565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b505050505081525050905060006127108260200151856000015461098d9190611949565b6109979190611960565b6001600160a01b03891660009081526003860160205260409020549091506109bf9082611982565b945050505050610b3f565b6006546040516370a0823160e01b81526001600160a01b03888116600483015260009216906370a0823190602401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611ad7565b905080600003610a4f5760009350505050610b3f565b600654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd9190611ad7565b905080600003610ad4576000945050505050610b3f565b60006127106004548660000154610aeb9190611949565b610af59190611960565b9050600082610b048584611949565b610b0e9190611960565b6001600160a01b038b166000908152600388016020526040902054909150610b369082611982565b96505050505050505b9392505050565b610b4e6112d2565b610b5860006112ff565b565b610b626111d9565b6006546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf9190611ad7565b905060008111610c125760405162461bcd60e51b815260206004820152600e60248201526d139bc81d1bdad95b9cc81a195b1960921b6044820152606401610402565b600654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c809190611ad7565b905060008111610cc55760405162461bcd60e51b815260206004820152601060248201526f139bc81d1bdad95b9cc81b5a5b9d195960821b6044820152606401610402565b6000848152600560205260408120600454815491929161271091610ce891611949565b610cf29190611960565b9050600083610d018684611949565b610d0b9190611960565b336000908152600385016020526040812054919250610d2a8284611982565b905060008111610d6f5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610402565b3360009081526003860160205260408120849055600286018054839290610d97908490611995565b90915550610da8905088338361126f565b604080516001600160a01b038a168152602081018390528a9133917fe0e4bf2fd2ffe44233c58673286f1035ea091966e9300fd7d8c510550e7bb754910160405180910390a35050505050505061062960018055565b6006546001600160a01b0316331480610e2157506000546001600160a01b031633145b610e5c5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610402565b6001600160a01b03831660009081526007602052604090205460ff16610eba5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606401610402565b6001600160a01b038316610f1257813414610f0d5760405162461bcd60e51b815260206004820152601360248201527208aa89040c2dadeeadce840dad2e6dac2e8c6d606b1b6044820152606401610402565b610f27565b610f276001600160a01b03841633308561134f565b60008481526005602052604081208054849290610f45908490611995565b92505081905550837f6974864b35253d04cffa371b2b99ff1dd701c0c7b3eba4a026efbf0148f5039b848484604051610f80939291906117e6565b60405180910390a250505050565b60028181548110610f9e57600080fd5b60009182526020909120600390910201805460018201546002830180546001600160a01b039093169450909291610fd4906118f9565b80601f0160208091040260200160405190810160405280929190818152602001828054611000906118f9565b801561104d5780601f106110225761010080835404028352916020019161104d565b820191906000526020600020905b81548152906001019060200180831161103057829003601f168201915b5050505050905083565b61105f6112d2565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015611192576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191611101906118f9565b80601f016020809104026020016040519081016040528092919081815260200182805461112d906118f9565b801561117a5780601f1061114f5761010080835404028352916020019161117a565b820191906000526020600020905b81548152906001019060200180831161115d57829003601f168201915b505050505081525050815260200190600101906110ae565b50505050905090565b6111a36112d2565b6001600160a01b0381166111cd57604051631e4fbdf760e01b815260006004820152602401610402565b6111d6816112ff565b50565b6002600154036111fc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000805b60025481101561126557826001600160a01b03166002828154811061122e5761122e6118e3565b60009182526020909120600390910201546001600160a01b0316036112535792915050565b8061125d81611af0565b915050611207565b5060001992915050565b6001600160a01b0383166112b9576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112b3573d6000803e3d6000fd5b50505050565b6112cd6001600160a01b03841683836113b6565b505050565b6000546001600160a01b03163314610b585760405163118cdaa760e01b8152336004820152602401610402565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0384811660248301528381166044830152606482018390526112b39186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506113e7565b6040516001600160a01b038381166024830152604482018390526112cd91859182169063a9059cbb90606401611384565b60006113fc6001600160a01b0384168361144a565b9050805160001415801561142157508080602001905181019061141f9190611b09565b155b156112cd57604051635274afe760e01b81526001600160a01b0384166004820152602401610402565b606061145883836000611461565b90505b92915050565b6060814710156114865760405163cd78605960e01b8152306004820152602401610402565b600080856001600160a01b031684866040516114a29190611b26565b60006040518083038185875af1925050503d80600081146114df576040519150601f19603f3d011682016040523d82523d6000602084013e6114e4565b606091505b50915091506114f48683836114fe565b9695505050505050565b6060826115135761150e8261155a565b610b3f565b815115801561152a57506001600160a01b0384163b155b1561155357604051639996b31560e01b81526001600160a01b0385166004820152602401610402565b5080610b3f565b80511561156a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461159a57600080fd5b919050565b600080604083850312156115b257600080fd5b823591506115c260208401611583565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126115f257600080fd5b813567ffffffffffffffff8082111561160d5761160d6115cb565b604051601f8301601f19908116603f01168101908282118183101715611635576116356115cb565b8160405283815286602085880101111561164e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561168357600080fd5b61168c84611583565b925060208401359150604084013567ffffffffffffffff8111156116af57600080fd5b6116bb868287016115e1565b9150509250925092565b6000806000606084860312156116da57600080fd5b6116e384611583565b9250602084013591506116f860408501611583565b90509250925092565b60006020828403121561171357600080fd5b5035919050565b60006020828403121561172c57600080fd5b61145882611583565b6000806000806080858703121561174b57600080fd5b8435935061175b60208601611583565b925060408501359150606085013567ffffffffffffffff81111561177e57600080fd5b61178a878288016115e1565b91505092959194509250565b60005b838110156117b1578181015183820152602001611799565b50506000910152565b600081518084526117d2816020860160208601611796565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600061180d60608301846117ba565b95945050505050565b80151581146111d657600080fd5b6000806040838503121561183757600080fd5b61184083611583565b9150602083013561185081611816565b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118d557888303603f19018552815180516001600160a01b03168452878101518885015286015160608785018190526118c1818601836117ba565b968901969450505090860190600101611882565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061190d57607f821691505b60208210810361192d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761145b5761145b611933565b60008261197d57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561145b5761145b611933565b8082018082111561145b5761145b611933565b601f8211156112cd57600081815260208120601f850160051c810160208610156119cf5750805b601f850160051c820191505b818110156119ee578281556001016119db565b505050505050565b815167ffffffffffffffff811115611a1057611a106115cb565b611a2481611a1e84546118f9565b846119a8565b602080601f831160018114611a595760008415611a415750858301515b600019600386901b1c1916600185901b1785556119ee565b600085815260208120601f198616915b82811015611a8857888601518255948401946001909101908401611a69565b5085821015611aa65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000611acf60408301846117ba565b949350505050565b600060208284031215611ae957600080fd5b5051919050565b600060018201611b0257611b02611933565b5060010190565b600060208284031215611b1b57600080fd5b8151610b3f81611816565b60008251611b38818460208701611796565b919091019291505056fea26469706673582212206a5514c5632cc69e6b69b5eeb28a80cf750e7a42133ccd23cc267a5f72a3452c64736f6c63430008140033608060405260016013553480156200001657600080fd5b5060405162003000380380620030008339810160408190526200003991620001cb565b33838360006200004a8382620002eb565b506001620000598282620002eb565b5050506001600160a01b0381166200008b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009681620000b4565b506001600b556014620000aa8282620002eb565b50505050620003b7565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200012e57600080fd5b81516001600160401b03808211156200014b576200014b62000106565b604051601f8301601f19908116603f0116810190828211818310171562000176576200017662000106565b816040528381526020925086838588010111156200019357600080fd5b600091505b83821015620001b7578582018301518183018401529082019062000198565b600093810190920192909252949350505050565b600080600060608486031215620001e157600080fd5b83516001600160401b0380821115620001f957600080fd5b62000207878388016200011c565b945060208601519150808211156200021e57600080fd5b6200022c878388016200011c565b935060408601519150808211156200024357600080fd5b5062000252868287016200011c565b9150509250925092565b600181811c908216806200027157607f821691505b6020821081036200029257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002e657600081815260208120601f850160051c81016020861015620002c15750805b601f850160051c820191505b81811015620002e257828155600101620002cd565b5050505b505050565b81516001600160401b0381111562000307576200030762000106565b6200031f816200031884546200025c565b8462000298565b602080601f8311600181146200035757600084156200033e5750858301515b600019600386901b1c1916600185901b178555620002e2565b600085815260208120601f198616915b82811015620003885788860151825594840194600190910190840162000367565b5085821015620003a75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612c3980620003c76000396000f3fe6080604052600436106101db5760003560e01c8063715018a611610102578063a22cb46511610095578063e985e9c511610064578063e985e9c514610566578063ee1cc94414610586578063f2113b5a146105a6578063f2fde38b146105bb57600080fd5b8063a22cb465146104f1578063b88d4fde14610511578063c87b56dd14610531578063e4b7fb731461055157600080fd5b80638da5cb5b116100d15780638da5cb5b1461048b57806395ccea67146104a957806395d89b41146104c9578063a0712d68146104de57600080fd5b8063715018a61461042057806375794a3c146104355780637c88e3d91461044b5780638d6cc56d1461046b57600080fd5b80632a55205a1161017a5780634f6ccce7116101495780634f6ccce7146103a057806355f804b3146103c05780636352211e146103e057806370a082311461040057600080fd5b80632a55205a146102f75780632f745c591461033657806342842e0e1461035657806346e55fe81461037657600080fd5b8063081812fc116101b6578063081812fc14610260578063095ea7b31461029857806318160ddd146102b857806323b872dd146102d757600080fd5b8062ec86e5146101e757806301ffc9a71461020957806306fdde031461023e57600080fd5b366101e257005b600080fd5b3480156101f357600080fd5b50610207610202366004612333565b6105db565b005b34801561021557600080fd5b50610229610224366004612417565b61086c565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b50610253610897565b6040516102359190612484565b34801561026c57600080fd5b5061028061027b366004612497565b610929565b6040516001600160a01b039091168152602001610235565b3480156102a457600080fd5b506102076102b33660046124b0565b610952565b3480156102c457600080fd5b506008545b604051908152602001610235565b3480156102e357600080fd5b506102076102f23660046124da565b610961565b34801561030357600080fd5b50610317610312366004612516565b6109ec565b604080516001600160a01b039093168352602083019190915201610235565b34801561034257600080fd5b506102c96103513660046124b0565b610a8a565b34801561036257600080fd5b506102076103713660046124da565b610aef565b34801561038257600080fd5b5061038b610b0f565b60405161023599989796959493929190612538565b3480156103ac57600080fd5b506102c96103bb366004612497565b610cfd565b3480156103cc57600080fd5b506102076103db3660046125bf565b610d56565b3480156103ec57600080fd5b506102806103fb366004612497565b610d6a565b34801561040c57600080fd5b506102c961041b3660046125fc565b610d75565b34801561042c57600080fd5b50610207610dbd565b34801561044157600080fd5b506102c960135481565b34801561045757600080fd5b506102076104663660046126a6565b610dd1565b34801561047757600080fd5b50610207610486366004612497565b610fb6565b34801561049757600080fd5b50600a546001600160a01b0316610280565b3480156104b557600080fd5b506102076104c43660046124b0565b611019565b3480156104d557600080fd5b5061025361108f565b6102076104ec366004612497565b61109e565b3480156104fd57600080fd5b5061020761050c366004612774565b61131c565b34801561051d57600080fd5b5061020761052c3660046127ab565b611327565b34801561053d57600080fd5b5061025361054c366004612497565b61133e565b34801561055d57600080fd5b506102c96113c3565b34801561057257600080fd5b50610229610581366004612827565b6113e6565b34801561059257600080fd5b506102076105a136600461285a565b611414565b3480156105b257600080fd5b506102c9611490565b3480156105c757600080fd5b506102076105d63660046125fc565b6114a1565b6105e36114dc565b600c80546105f090612877565b15905061063d5760405162461bcd60e51b8152602060048201526016602482015275135d5cda58c81a5b999bc8185b1c9958591e481cd95d60521b60448201526064015b60405180910390fd5b600085116106865760405162461bcd60e51b815260206004820152601660248201527504d617820737570706c79206d757374206265203e20360541b6044820152606401610634565b6103e8826001600160601b031611156106d45760405162461bcd60e51b815260206004820152601060248201526f0a4def2c2d8e8f240e8dede40d0d2ced60831b6044820152606401610634565b6001600160a01b0381166107225760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207661756c74206164647265737360581b6044820152606401610634565b60408051610120810182528981526020810189905290810187905260608101869052608081018590526001600160a01b0380851660a08301526001600160601b03841660c0830152821660e08201526001610100820152600c806107868b826128ff565b506020820151600182019061079b90826128ff565b50604082015160028201906107b090826128ff565b50606082015160038201556080820151600482015560a082015160c08301516001600160a01b03918216600160a01b6001600160601b03909216820217600584015560e08401516006909301805461010090950151939092166001600160a81b0319909416939093179115159092021790556040517f27be0f7cc661c634dbaf5b615c92bc9ed558815a55496acb8bd6b0325dee3e929061085a908a908a908990899089906129bf565b60405180910390a15050505050505050565b60006001600160e01b0319821663152a902d60e11b1480610891575061089182611509565b92915050565b6060600080546108a690612877565b80601f01602080910402602001604051908101604052809291908181526020018280546108d290612877565b801561091f5780601f106108f45761010080835404028352916020019161091f565b820191906000526020600020905b81548152906001019060200180831161090257829003601f168201915b5050505050905090565b60006109348261152e565b506000828152600460205260409020546001600160a01b0316610891565b61095d828233611567565b5050565b6001600160a01b03821661098b57604051633250574960e11b815260006004820152602401610634565b6000610998838333611574565b9050836001600160a01b0316816001600160a01b0316146109e6576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610634565b50505050565b60008281526002602052604081205481906001600160a01b0316610a455760405162461bcd60e51b815260206004820152601060248201526f546f6b656e206e6f742065786973747360801b6044820152606401610634565b60115460009061271090610a6990600160a01b90046001600160601b031686612a21565b610a739190612a38565b6012546001600160a01b0316969095509350505050565b6000610a9583610d75565b8210610ac65760405163295f44f760e21b81526001600160a01b038416600482015260248101839052604401610634565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610b0a83838360405180602001604052806000815250611327565b505050565b600c80548190610b1e90612877565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4a90612877565b8015610b975780601f10610b6c57610100808354040283529160200191610b97565b820191906000526020600020905b815481529060010190602001808311610b7a57829003601f168201915b505050505090806001018054610bac90612877565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd890612877565b8015610c255780601f10610bfa57610100808354040283529160200191610c25565b820191906000526020600020905b815481529060010190602001808311610c0857829003601f168201915b505050505090806002018054610c3a90612877565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6690612877565b8015610cb35780601f10610c8857610100808354040283529160200191610cb3565b820191906000526020600020905b815481529060010190602001808311610c9657829003601f168201915b50505050600383015460048401546005850154600690950154939491939092506001600160a01b0380831692600160a01b908190046001600160601b031692918216910460ff1689565b6000610d0860085490565b8210610d315760405163295f44f760e21b81526000600482015260248101839052604401610634565b60088281548110610d4457610d44612a5a565b90600052602060002001549050919050565b610d5e6114dc565b601461095d82826128ff565b60006108918261152e565b60006001600160a01b038216610da1576040516322718ad960e21b815260006004820152602401610634565b506001600160a01b031660009081526003602052604090205490565b610dc56114dc565b610dcf600061158b565b565b610dd96114dc565b8051825114610e235760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b6044820152606401610634565b601254600160a01b900460ff16610e715760405162461bcd60e51b81526020600482015260126024820152714d696e74696e67206e6f742061637469766560701b6044820152606401610634565b6000805b8251811015610eb757828181518110610e9057610e90612a5a565b602002602001015182610ea39190612a70565b915080610eaf81612a83565b915050610e75565b50600f54601354600190610ecc908490612a70565b610ed69190612a9c565b1115610f195760405162461bcd60e51b815260206004820152601260248201527145786365656473206d617820737570706c7960701b6044820152606401610634565b60005b83518110156109e6576000848281518110610f3957610f39612a5a565b602002602001015190506000848381518110610f5757610f57612a5a565b6020026020010151905060005b81811015610fa0576013805460009182610f7d83612a83565b919050559050610f8d84826115dd565b5080610f9881612a83565b915050610f64565b5050508080610fae90612a83565b915050610f1c565b610fbe6114dc565b6000600c6000018054610fd090612877565b9050116110145760405162461bcd60e51b8152602060048201526012602482015271135d5cda58c81a5b999bc81b9bdd081cd95d60721b6044820152606401610634565b601055565b6110216114dc565b6001600160a01b03821661106957600a546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610b0a573d6000803e3d6000fd5b61095d61107e600a546001600160a01b031690565b6001600160a01b03841690836115f7565b6060600180546108a690612877565b6110a6611656565b601254600160a01b900460ff166110f45760405162461bcd60e51b81526020600482015260126024820152714d696e74696e67206e6f742061637469766560701b6044820152606401610634565b6000811161113b5760405162461bcd60e51b815260206004820152601460248201527305175616e74697479206d757374206265203e20360641b6044820152606401610634565b600f5460135460019061114f908490612a70565b6111599190612a9c565b111561119c5760405162461bcd60e51b815260206004820152601260248201527145786365656473206d617820737570706c7960701b6044820152606401610634565b6010546000906111ad908390612a21565b6011549091506001600160a01b031661124857803410156112035760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610634565b8034111561124357336108fc6112198334612a9c565b6040518115909202916000818181858888f19350505050158015611241573d6000803e3d6000fd5b505b611260565b601154611260906001600160a01b0316333084611680565b60135460005b838110156112a257601380546000918261127f83612a83565b91905055905061128f33826115dd565b508061129a81612a83565b915050611266565b506011546040805180820190915260048152631b5a5b9d60e21b60208201526112d6916001600160a01b03169084906116b9565b604051838152339082907f2d03118aa776f7008445f6ca8490a6782ede2db364d741513555ba656ab1879f9060200160405180910390a350506113196001600b55565b50565b61095d3383836117bf565b611332848484610961565b6109e68484848461185e565b6000818152600260205260409020546060906001600160a01b03166113985760405162461bcd60e51b815260206004820152601060248201526f546f6b656e206e6f742065786973747360801b6044820152606401610634565b6040516113ad90601490600e90602001612b22565b6040516020818303038152906040529050919050565b600060016013546113d49190612a9c565b600f546113e19190612a9c565b905090565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61141c6114dc565b6000600c600001805461142e90612877565b9050116114725760405162461bcd60e51b8152602060048201526012602482015271135d5cda58c81a5b999bc81b9bdd081cd95d60721b6044820152606401610634565b60128054911515600160a01b0260ff60a01b19909216919091179055565b600060016013546113e19190612a9c565b6114a96114dc565b6001600160a01b0381166114d357604051631e4fbdf760e01b815260006004820152602401610634565b6113198161158b565b600a546001600160a01b03163314610dcf5760405163118cdaa760e01b8152336004820152602401610634565b60006001600160e01b0319821663780e9d6360e01b1480610891575061089182611987565b6000818152600260205260408120546001600160a01b03168061089157604051637e27328960e01b815260048101849052602401610634565b610b0a83838360016119d7565b6000611581848484611add565b90505b9392505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61095d828260405180602001604052806000815250611baa565b6040516001600160a01b03838116602483015260448201839052610b0a91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611bc1565b6002600b540361167957604051633ee5aeb560e01b815260040160405180910390fd5b6002600b55565b6040516001600160a01b0384811660248301528381166044830152606482018390526109e69186918216906323b872dd90608401611624565b6001600160a01b0383166117375760125460405163e2ca3f5560e01b81526001600160a01b039091169063e2ca3f5590849061170090600190889084908890600401612b37565b6000604051808303818588803b15801561171957600080fd5b505af115801561172d573d6000803e3d6000fd5b5050505050505050565b601254611751906001600160a01b03858116911684611c24565b60125460405163e2ca3f5560e01b81526001600160a01b039091169063e2ca3f559061178890600190879087908790600401612b37565b600060405180830381600087803b1580156117a257600080fd5b505af11580156117b6573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166117f157604051630b61174360e31b81526001600160a01b0383166004820152602401610634565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156109e657604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906118a0903390889087908790600401612b64565b6020604051808303816000875af19250505080156118db575060408051601f3d908101601f191682019092526118d891810190612b97565b60015b611944573d808015611909576040519150601f19603f3d011682016040523d82523d6000602084013e61190e565b606091505b50805160000361193c57604051633250574960e11b81526001600160a01b0385166004820152602401610634565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461198057604051633250574960e11b81526001600160a01b0385166004820152602401610634565b5050505050565b60006001600160e01b031982166380ac58cd60e01b14806119b857506001600160e01b03198216635b5e139f60e01b145b8061089157506301ffc9a760e01b6001600160e01b0319831614610891565b80806119eb57506001600160a01b03821615155b15611aad5760006119fb8461152e565b90506001600160a01b03831615801590611a275750826001600160a01b0316816001600160a01b031614155b8015611a3a5750611a3881846113e6565b155b15611a635760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610634565b8115611aab5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b600080611aeb858585611cb4565b90506001600160a01b038116611b4857611b4384600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b6b565b846001600160a01b0316816001600160a01b031614611b6b57611b6b8185611dad565b6001600160a01b038516611b8757611b8284611e3e565b611581565b846001600160a01b0316816001600160a01b031614611581576115818585611eed565b611bb48383611f3d565b610b0a600084848461185e565b6000611bd66001600160a01b03841683611fa2565b90508051600014158015611bfb575080806020019051810190611bf99190612bb4565b155b15610b0a57604051635274afe760e01b81526001600160a01b0384166004820152602401610634565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611c758482611fb0565b6109e6576040516001600160a01b03848116602483015260006044830152611caa91869182169063095ea7b390606401611624565b6109e68482611bc1565b6000828152600260205260408120546001600160a01b0390811690831615611ce157611ce1818486612058565b6001600160a01b03811615611d1f57611cfe6000856000806119d7565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615611d4e576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6000611db883610d75565b600083815260076020526040902054909150808214611e0b576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611e5090600190612a9c565b60008381526009602052604081205460088054939450909284908110611e7857611e78612a5a565b906000526020600020015490508060088381548110611e9957611e99612a5a565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611ed157611ed1612bd1565b6001900381819060005260206000200160009055905550505050565b60006001611efa84610d75565b611f049190612a9c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611f6757604051633250574960e11b815260006004820152602401610634565b6000611f7583836000611574565b90506001600160a01b03811615610b0a576040516339e3563760e11b815260006004820152602401610634565b6060611584838360006120bc565b6000806000846001600160a01b031684604051611fcd9190612be7565b6000604051808303816000865af19150503d806000811461200a576040519150601f19603f3d011682016040523d82523d6000602084013e61200f565b606091505b50915091508180156120395750805115806120395750808060200190518101906120399190612bb4565b801561204f57506000856001600160a01b03163b115b95945050505050565b612063838383612159565b610b0a576001600160a01b03831661209157604051637e27328960e01b815260048101829052602401610634565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610634565b6060814710156120e15760405163cd78605960e01b8152306004820152602401610634565b600080856001600160a01b031684866040516120fd9190612be7565b60006040518083038185875af1925050503d806000811461213a576040519150601f19603f3d011682016040523d82523d6000602084013e61213f565b606091505b509150915061214f8683836121bc565b9695505050505050565b60006001600160a01b038316158015906115815750826001600160a01b0316846001600160a01b03161480612193575061219384846113e6565b806115815750506000908152600460205260409020546001600160a01b03908116911614919050565b6060826121d1576121cc82612218565b611584565b81511580156121e857506001600160a01b0384163b155b1561221157604051639996b31560e01b81526001600160a01b0385166004820152602401610634565b5080611584565b8051156122285780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561228057612280612241565b604052919050565b600067ffffffffffffffff8311156122a2576122a2612241565b6122b5601f8401601f1916602001612257565b90508281528383830111156122c957600080fd5b828260208301376000602084830101529392505050565b600082601f8301126122f157600080fd5b61158483833560208501612288565b80356001600160a01b038116811461231757600080fd5b919050565b80356001600160601b038116811461231757600080fd5b600080600080600080600080610100898b03121561235057600080fd5b883567ffffffffffffffff8082111561236857600080fd5b6123748c838d016122e0565b995060208b013591508082111561238a57600080fd5b6123968c838d016122e0565b985060408b01359150808211156123ac57600080fd5b506123b98b828c016122e0565b96505060608901359450608089013593506123d660a08a01612300565b92506123e460c08a0161231c565b91506123f260e08a01612300565b90509295985092959890939650565b6001600160e01b03198116811461131957600080fd5b60006020828403121561242957600080fd5b813561158481612401565b60005b8381101561244f578181015183820152602001612437565b50506000910152565b60008151808452612470816020860160208601612434565b601f01601f19169290920160200192915050565b6020815260006115846020830184612458565b6000602082840312156124a957600080fd5b5035919050565b600080604083850312156124c357600080fd5b6124cc83612300565b946020939093013593505050565b6000806000606084860312156124ef57600080fd5b6124f884612300565b925061250660208501612300565b9150604084013590509250925092565b6000806040838503121561252957600080fd5b50508035926020909101359150565b600061012080835261254c8184018d612458565b90508281036020840152612560818c612458565b90508281036040840152612574818b612458565b6060840199909952505060808101959095526001600160a01b0393841660a08601526001600160601b039290921660c085015290911660e08301521515610100909101529392505050565b6000602082840312156125d157600080fd5b813567ffffffffffffffff8111156125e857600080fd5b6125f4848285016122e0565b949350505050565b60006020828403121561260e57600080fd5b61158482612300565b600067ffffffffffffffff82111561263157612631612241565b5060051b60200190565b600082601f83011261264c57600080fd5b8135602061266161265c83612617565b612257565b82815260059290921b8401810191818101908684111561268057600080fd5b8286015b8481101561269b5780358352918301918301612684565b509695505050505050565b600080604083850312156126b957600080fd5b823567ffffffffffffffff808211156126d157600080fd5b818501915085601f8301126126e557600080fd5b813560206126f561265c83612617565b82815260059290921b8401810191818101908984111561271457600080fd5b948201945b838610156127395761272a86612300565b82529482019490820190612719565b9650508601359250508082111561274f57600080fd5b5061275c8582860161263b565b9150509250929050565b801515811461131957600080fd5b6000806040838503121561278757600080fd5b61279083612300565b915060208301356127a081612766565b809150509250929050565b600080600080608085870312156127c157600080fd5b6127ca85612300565b93506127d860208601612300565b925060408501359150606085013567ffffffffffffffff8111156127fb57600080fd5b8501601f8101871361280c57600080fd5b61281b87823560208401612288565b91505092959194509250565b6000806040838503121561283a57600080fd5b61284383612300565b915061285160208401612300565b90509250929050565b60006020828403121561286c57600080fd5b813561158481612766565b600181811c9082168061288b57607f821691505b6020821081036128ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b0a57600081815260208120601f850160051c810160208610156128d85750805b601f850160051c820191505b818110156128f7578281556001016128e4565b505050505050565b815167ffffffffffffffff81111561291957612919612241565b61292d816129278454612877565b846128b1565b602080601f831160018114612962576000841561294a5750858301515b600019600386901b1c1916600185901b1785556128f7565b600085815260208120601f198616915b8281101561299157888601518255948401946001909101908401612972565b50858210156129af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60a0815260006129d260a0830188612458565b82810360208401526129e48188612458565b6040840196909652505060608101929092526001600160a01b031660809091015292915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761089157610891612a0b565b600082612a5557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b8082018082111561089157610891612a0b565b600060018201612a9557612a95612a0b565b5060010190565b8181038181111561089157610891612a0b565b60008154612abc81612877565b60018281168015612ad45760018114612ae957612b18565b60ff1984168752821515830287019450612b18565b8560005260208060002060005b85811015612b0f5781548a820152908401908201612af6565b50505082870194505b5050505092915050565b6000611581612b318386612aaf565b84612aaf565b84815260018060a01b038416602082015282604082015260806060820152600061214f6080830184612458565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061214f90830184612458565b600060208284031215612ba957600080fd5b815161158481612401565b600060208284031215612bc657600080fd5b815161158481612766565b634e487b7160e01b600052603160045260246000fd5b60008251612bf9818460208701612434565b919091019291505056fea2646970667358221220154e57dd378b6eec355bd140fd93001a6f15d88c4ec22f50d512dad8e0771c0e64736f6c63430008140033a2646970667358221220819c4d575099b9bf70a5abaf5c2ed8f8300e3a802d45103a4d02f696ab655c4264736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000525760003560e01c806339c12afd14620000575780637eddf36d1462000096578063d7b4e72214620000bc578063f4605ea314620000f4575b600080fd5b620000836200006836600462000458565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b620000ad620000a736600462000458565b62000132565b6040516200008d91906200047d565b620000d3620000cd3660046200058f565b620001cf565b604080516001600160a01b039384168152929091166020830152016200008d565b6200010b6200010536600462000621565b620003d1565b604080516001600160a01b039485168152939092166020840152908201526060016200008d565b6001600160a01b038116600090815260208181526040808320805482518185028101850190935280835260609492939192909184015b82821015620001c4576000848152602090819020604080516060810182526003860290920180546001600160a01b0390811684526001808301549091168486015260029091015491830191909152908352909201910162000168565b505050509050919050565b6000806000604051620001e2906200041f565b6001600160a01b039091168152602001604051809103906000f0801580156200020f573d6000803e3d6000fd5b50905084848460405162000223906200042d565b620002319392919062000696565b604051809103906000f0801580156200024e573d6000803e3d6000fd5b5060405163f2fde38b60e01b81523360048201529092506001600160a01b0382169063f2fde38b90602401600060405180830381600087803b1580156200029457600080fd5b505af1158015620002a9573d6000803e3d6000fd5b505060405163f2fde38b60e01b81523360048201526001600160a01b038516925063f2fde38b9150602401600060405180830381600087803b158015620002ef57600080fd5b505af115801562000304573d6000803e3d6000fd5b50503360008181526020818152604080832081516060810183526001600160a01b038a8116825289811682860190815242838601908152845460018181018755958952969097209251600390960290920180549582166001600160a01b0319968716178155915192820180549390911692909416919091179092559151600290910155519092507fd32cacde3f4023023e5c5a902ded72f1e0448c94eeaf241214ad50fd3d7d98869150620003c190859085908a908a90620006df565b60405180910390a2935093915050565b60006020528160005260406000208181548110620003ee57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b0391821694509116915083565b611cd2806200072d83390190565b61300080620023ff83390190565b80356001600160a01b03811681146200045357600080fd5b919050565b6000602082840312156200046b57600080fd5b62000476826200043b565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015620004d757815180516001600160a01b03908116865287820151168786015285015185850152606090930192908501906001016200049a565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200050c57600080fd5b813567ffffffffffffffff808211156200052a576200052a620004e4565b604051601f8301601f19908116603f01168101908282118183101715620005555762000555620004e4565b816040528381528660208588010111156200056f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215620005a557600080fd5b833567ffffffffffffffff80821115620005be57600080fd5b620005cc87838801620004fa565b94506020860135915080821115620005e357600080fd5b620005f187838801620004fa565b935060408601359150808211156200060857600080fd5b506200061786828701620004fa565b9150509250925092565b600080604083850312156200063557600080fd5b62000640836200043b565b946020939093013593505050565b6000815180845260005b81811015620006765760208185018101518683018201520162000658565b506000602082860101526020601f19601f83011685010191505092915050565b606081526000620006ab60608301866200064e565b8281036020840152620006bf81866200064e565b90508281036040840152620006d581856200064e565b9695505050505050565b6001600160a01b038581168252841660208201526080604082018190526000906200070d908301856200064e565b82810360608401526200072181856200064e565b97965050505050505056fe60806040523480156200001157600080fd5b5060405162001cd238038062001cd2833981016040819052620000349162000118565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000c8565b506001808055600680546001600160a01b0319166001600160a01b0393909316929092179091556000805260076020527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df805460ff191690911790556200014a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200012b57600080fd5b81516001600160a01b03811681146200014357600080fd5b9392505050565b611b78806200015a6000396000f3fe6080604052600436106101025760003560e01c8063909db46d11610095578063e2ca3f5511610064578063e2ca3f5514610307578063e75f7ddb1461031a578063e798646614610349578063efded14714610369578063f2fde38b1461038b57600080fd5b8063909db46d146102775780639e98554f146102b1578063c0c7d092146102d1578063d56d229d146102e757600080fd5b806368c4ac26116100d157806368c4ac26146101da578063715018a61461021a5780638099c2791461022f5780638da5cb5b1461024557600080fd5b806301c788651461010e5780631d833fb41461013057806322d0bef5146101505780634bda1d381461018357600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e61012936600461159f565b6103ab565b005b34801561013c57600080fd5b5061012e61014b36600461166e565b61062d565b34801561015c57600080fd5b5061017061016b3660046116c5565b610854565b6040519081526020015b60405180910390f35b34801561018f57600080fd5b506101bf61019e366004611701565b60056020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161017a565b3480156101e657600080fd5b5061020a6101f536600461171a565b60076020526000908152604090205460ff1681565b604051901515815260200161017a565b34801561022657600080fd5b5061012e610b46565b34801561023b57600080fd5b5061017060045481565b34801561025157600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161017a565b34801561028357600080fd5b506101bf610292366004611701565b6000908152600560205260409020805460018201546002909201549092565b3480156102bd57600080fd5b5061012e6102cc36600461159f565b610b5a565b3480156102dd57600080fd5b5061017060035481565b3480156102f357600080fd5b5060065461025f906001600160a01b031681565b61012e610315366004611735565b610dfe565b34801561032657600080fd5b5061033a610335366004611701565b610f8e565b60405161017a939291906117e6565b34801561035557600080fd5b5061012e610364366004611824565b611057565b34801561037557600080fd5b5061037e61108a565b60405161017a919061185b565b34801561039757600080fd5b5061012e6103a636600461171a565b61119b565b6103b36111d9565b60006103be33611203565b600254909150811061040b5760405162461bcd60e51b81526020600482015260116024820152702737ba1030903a32b0b69036b2b6b132b960791b60448201526064015b60405180910390fd5b600060028281548110610420576104206118e3565b90600052602060002090600302016040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160018201548152602001600282018054610482906118f9565b80601f01602080910402602001604051908101604052809291908181526020018280546104ae906118f9565b80156104fb5780601f106104d0576101008083540402835291602001916104fb565b820191906000526020600020905b8154815290600101906020018083116104de57829003601f168201915b505050919092525050506000858152600560209081526040822090830151815493945090926127109161052d91611949565b6105379190611960565b3360009081526003840160205260408120549192506105568284611982565b90506000811161059b5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610402565b33600090815260038501602052604081208490556001850180548392906105c3908490611995565b909155506105d4905087338361126f565b604080516001600160a01b038916815260208101839052899133917fb8bf6f32bf7a488c04b5e5caca227daad3574ec9aae29bef6239adb4c1390f12910160405180910390a350505050505061062960018055565b5050565b6106356112d2565b6001600160a01b03831661067d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610402565b600082116106c45760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420626173697320706f696e747360601b6044820152606401610402565b612710826003546106d59190611995565b11156107125760405162461bcd60e51b815260206004820152600c60248201526b45786365656473203130302560a01b6044820152606401610402565b604080516060810182526001600160a01b038581168252602082018581529282018481526002805460018101825560009190915283517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600390920291820180546001600160a01b0319169190941617835593517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf85015551919290917f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0909101906107de90826119f6565b50505081600360008282546107f39190611995565b909155505060035461080790612710611982565b6004556040516001600160a01b038416907f730e9e286c087db612ce57f4d5358c3ff01e9e890685ce2caadea0c06a1481bb906108479085908590611ab6565b60405180910390a2505050565b60008281526005602052604081208161086c86611203565b6002549091508110156109ca5760006002828154811061088e5761088e6118e3565b90600052602060002090600302016040518060600160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820180546108f0906118f9565b80601f016020809104026020016040519081016040528092919081815260200182805461091c906118f9565b80156109695780601f1061093e57610100808354040283529160200191610969565b820191906000526020600020905b81548152906001019060200180831161094c57829003601f168201915b505050505081525050905060006127108260200151856000015461098d9190611949565b6109979190611960565b6001600160a01b03891660009081526003860160205260409020549091506109bf9082611982565b945050505050610b3f565b6006546040516370a0823160e01b81526001600160a01b03888116600483015260009216906370a0823190602401602060405180830381865afa158015610a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a399190611ad7565b905080600003610a4f5760009350505050610b3f565b600654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd9190611ad7565b905080600003610ad4576000945050505050610b3f565b60006127106004548660000154610aeb9190611949565b610af59190611960565b9050600082610b048584611949565b610b0e9190611960565b6001600160a01b038b166000908152600388016020526040902054909150610b369082611982565b96505050505050505b9392505050565b610b4e6112d2565b610b5860006112ff565b565b610b626111d9565b6006546040516370a0823160e01b81523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf9190611ad7565b905060008111610c125760405162461bcd60e51b815260206004820152600e60248201526d139bc81d1bdad95b9cc81a195b1960921b6044820152606401610402565b600654604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c809190611ad7565b905060008111610cc55760405162461bcd60e51b815260206004820152601060248201526f139bc81d1bdad95b9cc81b5a5b9d195960821b6044820152606401610402565b6000848152600560205260408120600454815491929161271091610ce891611949565b610cf29190611960565b9050600083610d018684611949565b610d0b9190611960565b336000908152600385016020526040812054919250610d2a8284611982565b905060008111610d6f5760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610402565b3360009081526003860160205260408120849055600286018054839290610d97908490611995565b90915550610da8905088338361126f565b604080516001600160a01b038a168152602081018390528a9133917fe0e4bf2fd2ffe44233c58673286f1035ea091966e9300fd7d8c510550e7bb754910160405180910390a35050505050505061062960018055565b6006546001600160a01b0316331480610e2157506000546001600160a01b031633145b610e5c5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610402565b6001600160a01b03831660009081526007602052604090205460ff16610eba5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606401610402565b6001600160a01b038316610f1257813414610f0d5760405162461bcd60e51b815260206004820152601360248201527208aa89040c2dadeeadce840dad2e6dac2e8c6d606b1b6044820152606401610402565b610f27565b610f276001600160a01b03841633308561134f565b60008481526005602052604081208054849290610f45908490611995565b92505081905550837f6974864b35253d04cffa371b2b99ff1dd701c0c7b3eba4a026efbf0148f5039b848484604051610f80939291906117e6565b60405180910390a250505050565b60028181548110610f9e57600080fd5b60009182526020909120600390910201805460018201546002830180546001600160a01b039093169450909291610fd4906118f9565b80601f0160208091040260200160405190810160405280929190818152602001828054611000906118f9565b801561104d5780601f106110225761010080835404028352916020019161104d565b820191906000526020600020905b81548152906001019060200180831161103057829003601f168201915b5050505050905083565b61105f6112d2565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015611192576000848152602090819020604080516060810182526003860290920180546001600160a01b0316835260018101549383019390935260028301805492939291840191611101906118f9565b80601f016020809104026020016040519081016040528092919081815260200182805461112d906118f9565b801561117a5780601f1061114f5761010080835404028352916020019161117a565b820191906000526020600020905b81548152906001019060200180831161115d57829003601f168201915b505050505081525050815260200190600101906110ae565b50505050905090565b6111a36112d2565b6001600160a01b0381166111cd57604051631e4fbdf760e01b815260006004820152602401610402565b6111d6816112ff565b50565b6002600154036111fc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6000805b60025481101561126557826001600160a01b03166002828154811061122e5761122e6118e3565b60009182526020909120600390910201546001600160a01b0316036112535792915050565b8061125d81611af0565b915050611207565b5060001992915050565b6001600160a01b0383166112b9576040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156112b3573d6000803e3d6000fd5b50505050565b6112cd6001600160a01b03841683836113b6565b505050565b6000546001600160a01b03163314610b585760405163118cdaa760e01b8152336004820152602401610402565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0384811660248301528381166044830152606482018390526112b39186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506113e7565b6040516001600160a01b038381166024830152604482018390526112cd91859182169063a9059cbb90606401611384565b60006113fc6001600160a01b0384168361144a565b9050805160001415801561142157508080602001905181019061141f9190611b09565b155b156112cd57604051635274afe760e01b81526001600160a01b0384166004820152602401610402565b606061145883836000611461565b90505b92915050565b6060814710156114865760405163cd78605960e01b8152306004820152602401610402565b600080856001600160a01b031684866040516114a29190611b26565b60006040518083038185875af1925050503d80600081146114df576040519150601f19603f3d011682016040523d82523d6000602084013e6114e4565b606091505b50915091506114f48683836114fe565b9695505050505050565b6060826115135761150e8261155a565b610b3f565b815115801561152a57506001600160a01b0384163b155b1561155357604051639996b31560e01b81526001600160a01b0385166004820152602401610402565b5080610b3f565b80511561156a5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b038116811461159a57600080fd5b919050565b600080604083850312156115b257600080fd5b823591506115c260208401611583565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126115f257600080fd5b813567ffffffffffffffff8082111561160d5761160d6115cb565b604051601f8301601f19908116603f01168101908282118183101715611635576116356115cb565b8160405283815286602085880101111561164e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561168357600080fd5b61168c84611583565b925060208401359150604084013567ffffffffffffffff8111156116af57600080fd5b6116bb868287016115e1565b9150509250925092565b6000806000606084860312156116da57600080fd5b6116e384611583565b9250602084013591506116f860408501611583565b90509250925092565b60006020828403121561171357600080fd5b5035919050565b60006020828403121561172c57600080fd5b61145882611583565b6000806000806080858703121561174b57600080fd5b8435935061175b60208601611583565b925060408501359150606085013567ffffffffffffffff81111561177e57600080fd5b61178a878288016115e1565b91505092959194509250565b60005b838110156117b1578181015183820152602001611799565b50506000910152565b600081518084526117d2816020860160208601611796565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600061180d60608301846117ba565b95945050505050565b80151581146111d657600080fd5b6000806040838503121561183757600080fd5b61184083611583565b9150602083013561185081611816565b809150509250929050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118d557888303603f19018552815180516001600160a01b03168452878101518885015286015160608785018190526118c1818601836117ba565b968901969450505090860190600101611882565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061190d57607f821691505b60208210810361192d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761145b5761145b611933565b60008261197d57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561145b5761145b611933565b8082018082111561145b5761145b611933565b601f8211156112cd57600081815260208120601f850160051c810160208610156119cf5750805b601f850160051c820191505b818110156119ee578281556001016119db565b505050505050565b815167ffffffffffffffff811115611a1057611a106115cb565b611a2481611a1e84546118f9565b846119a8565b602080601f831160018114611a595760008415611a415750858301515b600019600386901b1c1916600185901b1785556119ee565b600085815260208120601f198616915b82811015611a8857888601518255948401946001909101908401611a69565b5085821015611aa65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152604060208201526000611acf60408301846117ba565b949350505050565b600060208284031215611ae957600080fd5b5051919050565b600060018201611b0257611b02611933565b5060010190565b600060208284031215611b1b57600080fd5b8151610b3f81611816565b60008251611b38818460208701611796565b919091019291505056fea26469706673582212206a5514c5632cc69e6b69b5eeb28a80cf750e7a42133ccd23cc267a5f72a3452c64736f6c63430008140033608060405260016013553480156200001657600080fd5b5060405162003000380380620030008339810160408190526200003991620001cb565b33838360006200004a8382620002eb565b506001620000598282620002eb565b5050506001600160a01b0381166200008b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009681620000b4565b506001600b556014620000aa8282620002eb565b50505050620003b7565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200012e57600080fd5b81516001600160401b03808211156200014b576200014b62000106565b604051601f8301601f19908116603f0116810190828211818310171562000176576200017662000106565b816040528381526020925086838588010111156200019357600080fd5b600091505b83821015620001b7578582018301518183018401529082019062000198565b600093810190920192909252949350505050565b600080600060608486031215620001e157600080fd5b83516001600160401b0380821115620001f957600080fd5b62000207878388016200011c565b945060208601519150808211156200021e57600080fd5b6200022c878388016200011c565b935060408601519150808211156200024357600080fd5b5062000252868287016200011c565b9150509250925092565b600181811c908216806200027157607f821691505b6020821081036200029257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002e657600081815260208120601f850160051c81016020861015620002c15750805b601f850160051c820191505b81811015620002e257828155600101620002cd565b5050505b505050565b81516001600160401b0381111562000307576200030762000106565b6200031f816200031884546200025c565b8462000298565b602080601f8311600181146200035757600084156200033e5750858301515b600019600386901b1c1916600185901b178555620002e2565b600085815260208120601f198616915b82811015620003885788860151825594840194600190910190840162000367565b5085821015620003a75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612c3980620003c76000396000f3fe6080604052600436106101db5760003560e01c8063715018a611610102578063a22cb46511610095578063e985e9c511610064578063e985e9c514610566578063ee1cc94414610586578063f2113b5a146105a6578063f2fde38b146105bb57600080fd5b8063a22cb465146104f1578063b88d4fde14610511578063c87b56dd14610531578063e4b7fb731461055157600080fd5b80638da5cb5b116100d15780638da5cb5b1461048b57806395ccea67146104a957806395d89b41146104c9578063a0712d68146104de57600080fd5b8063715018a61461042057806375794a3c146104355780637c88e3d91461044b5780638d6cc56d1461046b57600080fd5b80632a55205a1161017a5780634f6ccce7116101495780634f6ccce7146103a057806355f804b3146103c05780636352211e146103e057806370a082311461040057600080fd5b80632a55205a146102f75780632f745c591461033657806342842e0e1461035657806346e55fe81461037657600080fd5b8063081812fc116101b6578063081812fc14610260578063095ea7b31461029857806318160ddd146102b857806323b872dd146102d757600080fd5b8062ec86e5146101e757806301ffc9a71461020957806306fdde031461023e57600080fd5b366101e257005b600080fd5b3480156101f357600080fd5b50610207610202366004612333565b6105db565b005b34801561021557600080fd5b50610229610224366004612417565b61086c565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b50610253610897565b6040516102359190612484565b34801561026c57600080fd5b5061028061027b366004612497565b610929565b6040516001600160a01b039091168152602001610235565b3480156102a457600080fd5b506102076102b33660046124b0565b610952565b3480156102c457600080fd5b506008545b604051908152602001610235565b3480156102e357600080fd5b506102076102f23660046124da565b610961565b34801561030357600080fd5b50610317610312366004612516565b6109ec565b604080516001600160a01b039093168352602083019190915201610235565b34801561034257600080fd5b506102c96103513660046124b0565b610a8a565b34801561036257600080fd5b506102076103713660046124da565b610aef565b34801561038257600080fd5b5061038b610b0f565b60405161023599989796959493929190612538565b3480156103ac57600080fd5b506102c96103bb366004612497565b610cfd565b3480156103cc57600080fd5b506102076103db3660046125bf565b610d56565b3480156103ec57600080fd5b506102806103fb366004612497565b610d6a565b34801561040c57600080fd5b506102c961041b3660046125fc565b610d75565b34801561042c57600080fd5b50610207610dbd565b34801561044157600080fd5b506102c960135481565b34801561045757600080fd5b506102076104663660046126a6565b610dd1565b34801561047757600080fd5b50610207610486366004612497565b610fb6565b34801561049757600080fd5b50600a546001600160a01b0316610280565b3480156104b557600080fd5b506102076104c43660046124b0565b611019565b3480156104d557600080fd5b5061025361108f565b6102076104ec366004612497565b61109e565b3480156104fd57600080fd5b5061020761050c366004612774565b61131c565b34801561051d57600080fd5b5061020761052c3660046127ab565b611327565b34801561053d57600080fd5b5061025361054c366004612497565b61133e565b34801561055d57600080fd5b506102c96113c3565b34801561057257600080fd5b50610229610581366004612827565b6113e6565b34801561059257600080fd5b506102076105a136600461285a565b611414565b3480156105b257600080fd5b506102c9611490565b3480156105c757600080fd5b506102076105d63660046125fc565b6114a1565b6105e36114dc565b600c80546105f090612877565b15905061063d5760405162461bcd60e51b8152602060048201526016602482015275135d5cda58c81a5b999bc8185b1c9958591e481cd95d60521b60448201526064015b60405180910390fd5b600085116106865760405162461bcd60e51b815260206004820152601660248201527504d617820737570706c79206d757374206265203e20360541b6044820152606401610634565b6103e8826001600160601b031611156106d45760405162461bcd60e51b815260206004820152601060248201526f0a4def2c2d8e8f240e8dede40d0d2ced60831b6044820152606401610634565b6001600160a01b0381166107225760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207661756c74206164647265737360581b6044820152606401610634565b60408051610120810182528981526020810189905290810187905260608101869052608081018590526001600160a01b0380851660a08301526001600160601b03841660c0830152821660e08201526001610100820152600c806107868b826128ff565b506020820151600182019061079b90826128ff565b50604082015160028201906107b090826128ff565b50606082015160038201556080820151600482015560a082015160c08301516001600160a01b03918216600160a01b6001600160601b03909216820217600584015560e08401516006909301805461010090950151939092166001600160a81b0319909416939093179115159092021790556040517f27be0f7cc661c634dbaf5b615c92bc9ed558815a55496acb8bd6b0325dee3e929061085a908a908a908990899089906129bf565b60405180910390a15050505050505050565b60006001600160e01b0319821663152a902d60e11b1480610891575061089182611509565b92915050565b6060600080546108a690612877565b80601f01602080910402602001604051908101604052809291908181526020018280546108d290612877565b801561091f5780601f106108f45761010080835404028352916020019161091f565b820191906000526020600020905b81548152906001019060200180831161090257829003601f168201915b5050505050905090565b60006109348261152e565b506000828152600460205260409020546001600160a01b0316610891565b61095d828233611567565b5050565b6001600160a01b03821661098b57604051633250574960e11b815260006004820152602401610634565b6000610998838333611574565b9050836001600160a01b0316816001600160a01b0316146109e6576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610634565b50505050565b60008281526002602052604081205481906001600160a01b0316610a455760405162461bcd60e51b815260206004820152601060248201526f546f6b656e206e6f742065786973747360801b6044820152606401610634565b60115460009061271090610a6990600160a01b90046001600160601b031686612a21565b610a739190612a38565b6012546001600160a01b0316969095509350505050565b6000610a9583610d75565b8210610ac65760405163295f44f760e21b81526001600160a01b038416600482015260248101839052604401610634565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b610b0a83838360405180602001604052806000815250611327565b505050565b600c80548190610b1e90612877565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4a90612877565b8015610b975780601f10610b6c57610100808354040283529160200191610b97565b820191906000526020600020905b815481529060010190602001808311610b7a57829003601f168201915b505050505090806001018054610bac90612877565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd890612877565b8015610c255780601f10610bfa57610100808354040283529160200191610c25565b820191906000526020600020905b815481529060010190602001808311610c0857829003601f168201915b505050505090806002018054610c3a90612877565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6690612877565b8015610cb35780601f10610c8857610100808354040283529160200191610cb3565b820191906000526020600020905b815481529060010190602001808311610c9657829003601f168201915b50505050600383015460048401546005850154600690950154939491939092506001600160a01b0380831692600160a01b908190046001600160601b031692918216910460ff1689565b6000610d0860085490565b8210610d315760405163295f44f760e21b81526000600482015260248101839052604401610634565b60088281548110610d4457610d44612a5a565b90600052602060002001549050919050565b610d5e6114dc565b601461095d82826128ff565b60006108918261152e565b60006001600160a01b038216610da1576040516322718ad960e21b815260006004820152602401610634565b506001600160a01b031660009081526003602052604090205490565b610dc56114dc565b610dcf600061158b565b565b610dd96114dc565b8051825114610e235760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b6044820152606401610634565b601254600160a01b900460ff16610e715760405162461bcd60e51b81526020600482015260126024820152714d696e74696e67206e6f742061637469766560701b6044820152606401610634565b6000805b8251811015610eb757828181518110610e9057610e90612a5a565b602002602001015182610ea39190612a70565b915080610eaf81612a83565b915050610e75565b50600f54601354600190610ecc908490612a70565b610ed69190612a9c565b1115610f195760405162461bcd60e51b815260206004820152601260248201527145786365656473206d617820737570706c7960701b6044820152606401610634565b60005b83518110156109e6576000848281518110610f3957610f39612a5a565b602002602001015190506000848381518110610f5757610f57612a5a565b6020026020010151905060005b81811015610fa0576013805460009182610f7d83612a83565b919050559050610f8d84826115dd565b5080610f9881612a83565b915050610f64565b5050508080610fae90612a83565b915050610f1c565b610fbe6114dc565b6000600c6000018054610fd090612877565b9050116110145760405162461bcd60e51b8152602060048201526012602482015271135d5cda58c81a5b999bc81b9bdd081cd95d60721b6044820152606401610634565b601055565b6110216114dc565b6001600160a01b03821661106957600a546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610b0a573d6000803e3d6000fd5b61095d61107e600a546001600160a01b031690565b6001600160a01b03841690836115f7565b6060600180546108a690612877565b6110a6611656565b601254600160a01b900460ff166110f45760405162461bcd60e51b81526020600482015260126024820152714d696e74696e67206e6f742061637469766560701b6044820152606401610634565b6000811161113b5760405162461bcd60e51b815260206004820152601460248201527305175616e74697479206d757374206265203e20360641b6044820152606401610634565b600f5460135460019061114f908490612a70565b6111599190612a9c565b111561119c5760405162461bcd60e51b815260206004820152601260248201527145786365656473206d617820737570706c7960701b6044820152606401610634565b6010546000906111ad908390612a21565b6011549091506001600160a01b031661124857803410156112035760405162461bcd60e51b815260206004820152601060248201526f092dce6eaccccd2c6d2cadce8408aa8960831b6044820152606401610634565b8034111561124357336108fc6112198334612a9c565b6040518115909202916000818181858888f19350505050158015611241573d6000803e3d6000fd5b505b611260565b601154611260906001600160a01b0316333084611680565b60135460005b838110156112a257601380546000918261127f83612a83565b91905055905061128f33826115dd565b508061129a81612a83565b915050611266565b506011546040805180820190915260048152631b5a5b9d60e21b60208201526112d6916001600160a01b03169084906116b9565b604051838152339082907f2d03118aa776f7008445f6ca8490a6782ede2db364d741513555ba656ab1879f9060200160405180910390a350506113196001600b55565b50565b61095d3383836117bf565b611332848484610961565b6109e68484848461185e565b6000818152600260205260409020546060906001600160a01b03166113985760405162461bcd60e51b815260206004820152601060248201526f546f6b656e206e6f742065786973747360801b6044820152606401610634565b6040516113ad90601490600e90602001612b22565b6040516020818303038152906040529050919050565b600060016013546113d49190612a9c565b600f546113e19190612a9c565b905090565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61141c6114dc565b6000600c600001805461142e90612877565b9050116114725760405162461bcd60e51b8152602060048201526012602482015271135d5cda58c81a5b999bc81b9bdd081cd95d60721b6044820152606401610634565b60128054911515600160a01b0260ff60a01b19909216919091179055565b600060016013546113e19190612a9c565b6114a96114dc565b6001600160a01b0381166114d357604051631e4fbdf760e01b815260006004820152602401610634565b6113198161158b565b600a546001600160a01b03163314610dcf5760405163118cdaa760e01b8152336004820152602401610634565b60006001600160e01b0319821663780e9d6360e01b1480610891575061089182611987565b6000818152600260205260408120546001600160a01b03168061089157604051637e27328960e01b815260048101849052602401610634565b610b0a83838360016119d7565b6000611581848484611add565b90505b9392505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61095d828260405180602001604052806000815250611baa565b6040516001600160a01b03838116602483015260448201839052610b0a91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611bc1565b6002600b540361167957604051633ee5aeb560e01b815260040160405180910390fd5b6002600b55565b6040516001600160a01b0384811660248301528381166044830152606482018390526109e69186918216906323b872dd90608401611624565b6001600160a01b0383166117375760125460405163e2ca3f5560e01b81526001600160a01b039091169063e2ca3f5590849061170090600190889084908890600401612b37565b6000604051808303818588803b15801561171957600080fd5b505af115801561172d573d6000803e3d6000fd5b5050505050505050565b601254611751906001600160a01b03858116911684611c24565b60125460405163e2ca3f5560e01b81526001600160a01b039091169063e2ca3f559061178890600190879087908790600401612b37565b600060405180830381600087803b1580156117a257600080fd5b505af11580156117b6573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166117f157604051630b61174360e31b81526001600160a01b0383166004820152602401610634565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156109e657604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906118a0903390889087908790600401612b64565b6020604051808303816000875af19250505080156118db575060408051601f3d908101601f191682019092526118d891810190612b97565b60015b611944573d808015611909576040519150601f19603f3d011682016040523d82523d6000602084013e61190e565b606091505b50805160000361193c57604051633250574960e11b81526001600160a01b0385166004820152602401610634565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461198057604051633250574960e11b81526001600160a01b0385166004820152602401610634565b5050505050565b60006001600160e01b031982166380ac58cd60e01b14806119b857506001600160e01b03198216635b5e139f60e01b145b8061089157506301ffc9a760e01b6001600160e01b0319831614610891565b80806119eb57506001600160a01b03821615155b15611aad5760006119fb8461152e565b90506001600160a01b03831615801590611a275750826001600160a01b0316816001600160a01b031614155b8015611a3a5750611a3881846113e6565b155b15611a635760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610634565b8115611aab5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b600080611aeb858585611cb4565b90506001600160a01b038116611b4857611b4384600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611b6b565b846001600160a01b0316816001600160a01b031614611b6b57611b6b8185611dad565b6001600160a01b038516611b8757611b8284611e3e565b611581565b846001600160a01b0316816001600160a01b031614611581576115818585611eed565b611bb48383611f3d565b610b0a600084848461185e565b6000611bd66001600160a01b03841683611fa2565b90508051600014158015611bfb575080806020019051810190611bf99190612bb4565b155b15610b0a57604051635274afe760e01b81526001600160a01b0384166004820152602401610634565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052611c758482611fb0565b6109e6576040516001600160a01b03848116602483015260006044830152611caa91869182169063095ea7b390606401611624565b6109e68482611bc1565b6000828152600260205260408120546001600160a01b0390811690831615611ce157611ce1818486612058565b6001600160a01b03811615611d1f57611cfe6000856000806119d7565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615611d4e576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6000611db883610d75565b600083815260076020526040902054909150808214611e0b576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611e5090600190612a9c565b60008381526009602052604081205460088054939450909284908110611e7857611e78612a5a565b906000526020600020015490508060088381548110611e9957611e99612a5a565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611ed157611ed1612bd1565b6001900381819060005260206000200160009055905550505050565b60006001611efa84610d75565b611f049190612a9c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b038216611f6757604051633250574960e11b815260006004820152602401610634565b6000611f7583836000611574565b90506001600160a01b03811615610b0a576040516339e3563760e11b815260006004820152602401610634565b6060611584838360006120bc565b6000806000846001600160a01b031684604051611fcd9190612be7565b6000604051808303816000865af19150503d806000811461200a576040519150601f19603f3d011682016040523d82523d6000602084013e61200f565b606091505b50915091508180156120395750805115806120395750808060200190518101906120399190612bb4565b801561204f57506000856001600160a01b03163b115b95945050505050565b612063838383612159565b610b0a576001600160a01b03831661209157604051637e27328960e01b815260048101829052602401610634565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610634565b6060814710156120e15760405163cd78605960e01b8152306004820152602401610634565b600080856001600160a01b031684866040516120fd9190612be7565b60006040518083038185875af1925050503d806000811461213a576040519150601f19603f3d011682016040523d82523d6000602084013e61213f565b606091505b509150915061214f8683836121bc565b9695505050505050565b60006001600160a01b038316158015906115815750826001600160a01b0316846001600160a01b03161480612193575061219384846113e6565b806115815750506000908152600460205260409020546001600160a01b03908116911614919050565b6060826121d1576121cc82612218565b611584565b81511580156121e857506001600160a01b0384163b155b1561221157604051639996b31560e01b81526001600160a01b0385166004820152602401610634565b5080611584565b8051156122285780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561228057612280612241565b604052919050565b600067ffffffffffffffff8311156122a2576122a2612241565b6122b5601f8401601f1916602001612257565b90508281528383830111156122c957600080fd5b828260208301376000602084830101529392505050565b600082601f8301126122f157600080fd5b61158483833560208501612288565b80356001600160a01b038116811461231757600080fd5b919050565b80356001600160601b038116811461231757600080fd5b600080600080600080600080610100898b03121561235057600080fd5b883567ffffffffffffffff8082111561236857600080fd5b6123748c838d016122e0565b995060208b013591508082111561238a57600080fd5b6123968c838d016122e0565b985060408b01359150808211156123ac57600080fd5b506123b98b828c016122e0565b96505060608901359450608089013593506123d660a08a01612300565b92506123e460c08a0161231c565b91506123f260e08a01612300565b90509295985092959890939650565b6001600160e01b03198116811461131957600080fd5b60006020828403121561242957600080fd5b813561158481612401565b60005b8381101561244f578181015183820152602001612437565b50506000910152565b60008151808452612470816020860160208601612434565b601f01601f19169290920160200192915050565b6020815260006115846020830184612458565b6000602082840312156124a957600080fd5b5035919050565b600080604083850312156124c357600080fd5b6124cc83612300565b946020939093013593505050565b6000806000606084860312156124ef57600080fd5b6124f884612300565b925061250660208501612300565b9150604084013590509250925092565b6000806040838503121561252957600080fd5b50508035926020909101359150565b600061012080835261254c8184018d612458565b90508281036020840152612560818c612458565b90508281036040840152612574818b612458565b6060840199909952505060808101959095526001600160a01b0393841660a08601526001600160601b039290921660c085015290911660e08301521515610100909101529392505050565b6000602082840312156125d157600080fd5b813567ffffffffffffffff8111156125e857600080fd5b6125f4848285016122e0565b949350505050565b60006020828403121561260e57600080fd5b61158482612300565b600067ffffffffffffffff82111561263157612631612241565b5060051b60200190565b600082601f83011261264c57600080fd5b8135602061266161265c83612617565b612257565b82815260059290921b8401810191818101908684111561268057600080fd5b8286015b8481101561269b5780358352918301918301612684565b509695505050505050565b600080604083850312156126b957600080fd5b823567ffffffffffffffff808211156126d157600080fd5b818501915085601f8301126126e557600080fd5b813560206126f561265c83612617565b82815260059290921b8401810191818101908984111561271457600080fd5b948201945b838610156127395761272a86612300565b82529482019490820190612719565b9650508601359250508082111561274f57600080fd5b5061275c8582860161263b565b9150509250929050565b801515811461131957600080fd5b6000806040838503121561278757600080fd5b61279083612300565b915060208301356127a081612766565b809150509250929050565b600080600080608085870312156127c157600080fd5b6127ca85612300565b93506127d860208601612300565b925060408501359150606085013567ffffffffffffffff8111156127fb57600080fd5b8501601f8101871361280c57600080fd5b61281b87823560208401612288565b91505092959194509250565b6000806040838503121561283a57600080fd5b61284383612300565b915061285160208401612300565b90509250929050565b60006020828403121561286c57600080fd5b813561158481612766565b600181811c9082168061288b57607f821691505b6020821081036128ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610b0a57600081815260208120601f850160051c810160208610156128d85750805b601f850160051c820191505b818110156128f7578281556001016128e4565b505050505050565b815167ffffffffffffffff81111561291957612919612241565b61292d816129278454612877565b846128b1565b602080601f831160018114612962576000841561294a5750858301515b600019600386901b1c1916600185901b1785556128f7565b600085815260208120601f198616915b8281101561299157888601518255948401946001909101908401612972565b50858210156129af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60a0815260006129d260a0830188612458565b82810360208401526129e48188612458565b6040840196909652505060608101929092526001600160a01b031660809091015292915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761089157610891612a0b565b600082612a5557634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b8082018082111561089157610891612a0b565b600060018201612a9557612a95612a0b565b5060010190565b8181038181111561089157610891612a0b565b60008154612abc81612877565b60018281168015612ad45760018114612ae957612b18565b60ff1984168752821515830287019450612b18565b8560005260208060002060005b85811015612b0f5781548a820152908401908201612af6565b50505082870194505b5050505092915050565b6000611581612b318386612aaf565b84612aaf565b84815260018060a01b038416602082015282604082015260806060820152600061214f6080830184612458565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061214f90830184612458565b600060208284031215612ba957600080fd5b815161158481612401565b600060208284031215612bc657600080fd5b815161158481612766565b634e487b7160e01b600052603160045260246000fd5b60008251612bf9818460208701612434565b919091019291505056fea2646970667358221220154e57dd378b6eec355bd140fd93001a6f15d88c4ec22f50d512dad8e0771c0e64736f6c63430008140033a2646970667358221220819c4d575099b9bf70a5abaf5c2ed8f8300e3a802d45103a4d02f696ab655c4264736f6c63430008140033",
  "devdoc": {
    "details": "音乐NFT系统工厂合约，用于一键部署完整系统",
    "kind": "dev",
    "methods": {
      "deployMusicNFTSystem(string,string,string)": {
        "details": "部署完整的音乐NFT系统"
      },
      "getDeployedSystems(address)": {
        "details": "获取用户部署的系统"
      },
      "getDeployedSystemsCount(address)": {
        "details": "获取用户部署的系统数量"
      }
    },
    "title": "MusicNFTFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4880,
        "contract": "contracts/MusicNFTFactory.sol:MusicNFTFactory",
        "label": "deployedSystems",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_array(t_struct(DeployedSystem)4874_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DeployedSystem)4874_storage)dyn_storage": {
        "base": "t_struct(DeployedSystem)4874_storage",
        "encoding": "dynamic_array",
        "label": "struct MusicNFTFactory.DeployedSystem[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(DeployedSystem)4874_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MusicNFTFactory.DeployedSystem[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(DeployedSystem)4874_storage)dyn_storage"
      },
      "t_struct(DeployedSystem)4874_storage": {
        "encoding": "inplace",
        "label": "struct MusicNFTFactory.DeployedSystem",
        "members": [
          {
            "astId": 4869,
            "contract": "contracts/MusicNFTFactory.sol:MusicNFTFactory",
            "label": "nftContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4871,
            "contract": "contracts/MusicNFTFactory.sol:MusicNFTFactory",
            "label": "vault",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4873,
            "contract": "contracts/MusicNFTFactory.sol:MusicNFTFactory",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}